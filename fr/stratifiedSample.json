{
  "title": "Division Stratifiée",
  "navigation": "Division Stratifiée",
  "traindataset": "Entrez le nom du jeu de données d'entraînement",
  "testdataset": "Entrez le nom du jeu de données de test",
  "split": "Entrez le pourcentage de division",
  "seed": "Définir la graine",
  "dependent": "Variable à partir de laquelle construire des échantillons stratifiés",
  "help": {
    "title": "Division Stratifiée",
    "r_help": "help(createDataPartition, package=\"caret\")",
    "body": "\n<b>Description</b></br>\nUne série de partitions de test/formation est créée à l'aide de createDataPartition tandis que createResample crée un ou plusieurs échantillons bootstrap. createFolds divise les données en k groupes tandis que createTimeSlices crée une division de validation croisée pour les données de séries temporelles. groupKFold divise les données en fonction d'un facteur de regroupement.\n<br/>\n<b>Utilisation</b>\n<br/>\n<code> \ncreateDataPartition(y, times = 1, p = 0.5, list = TRUE, groups = min(5,length(y)))<br/>\ncreateFolds(y, k = 10, list = TRUE, returnTrain = FALSE)<br/>\ncreateTimeSlices(y, initialWindow, horizon = 1, fixedWindow = TRUE,skip = 0)<br/>\ngroupKFold(group, k = length(unique(group)))<br/>\n</code> <br/>\n<b>Arguments</b><br/>\n<ul>\n<li>\ny: un vecteur de résultats. Pour createTimeSlices, ceux-ci doivent être dans l'ordre chronologique.\n</li>\n<li>\ntimes: le nombre de partitions à créer\n</li>\n<li>\np: le pourcentage de données qui va à l'entraînement\n</li>\n<li>\nlist: logique - les résultats doivent-ils être dans une liste (TRUE) ou dans une matrice avec le nombre de lignes égal à floor(p * length(y)) et des colonnes times.\n</li>\n<li>\ngroups: pour y numérique, le nombre de ruptures dans les quantiles (voir ci-dessous)\n</li>\n<li>\nk: un entier pour le nombre de plis.\n</li>\n<li>\nreturnTrain: un logique. Lorsque vrai, les valeurs retournées sont les positions d'échantillon correspondant aux données utilisées lors de l'entraînement. Cet argument ne fonctionne qu'en conjonction avec list = TRUE\n</li>\n<li>\ninitialWindow: Le nombre initial de valeurs consécutives dans chaque échantillon de jeu d'entraînement\n</li>\n<li>\nhorizon: le nombre de valeurs consécutives dans l'échantillon de test\n</li>\n<li>\nfixedWindow: logique, si FALSE, tous les échantillons d'entraînement commencent à 1\n</li>\n<li>\nskip: entier, combien (le cas échéant) de rééchantillons à ignorer pour réduire le montant total\n</li>\n<li>\ngroup: un vecteur de groupes dont la longueur correspond au nombre de lignes dans l'ensemble de données global.\n</li>\n</ul>\n<b>Détails</b></br>\nPour les échantillons bootstrap, un échantillonnage aléatoire simple est utilisé.\nPour d'autres divisions de données, l'échantillonnage aléatoire est effectué au sein des niveaux de y lorsque y est un facteur dans une tentative d'équilibrer les distributions de classe au sein des divisions.</br>\nPour y numérique, l'échantillon est divisé en sections de groupes basées sur des percentiles et l'échantillonnage est effectué au sein de ces sous-groupes. Pour createDataPartition, le nombre de percentiles est défini via l'argument groups. Pour createFolds et createMultiFolds, le nombre de groupes est défini dynamiquement en fonction de la taille de l'échantillon et de k. Pour des tailles d'échantillon plus petites, ces deux fonctions peuvent ne pas effectuer de division stratifiée et, au maximum, diviser les données en quartiles.</br>\nDe plus, pour createDataPartition, des tailles de classe très petites (<= 3) peuvent ne pas apparaître à la fois dans les données d'entraînement et de test.</br>\nPour plusieurs validations croisées k-fold, des plis complètement indépendants sont créés. Les noms des objets de liste indiqueront l'appartenance au pli en utilisant le modèle \"Foldi.Repj\" signifiant la i-ème section (de k) du j-ème ensemble de validation croisée (de times). Notez que cette fonction appelle createFolds avec list = TRUE et returnTrain = TRUE.</br>\nHyndman et Athanasopoulos (2013) discutent des techniques d'origine de prévision roulante qui déplacent les ensembles d'entraînement et de test dans le temps. createTimeSlices peut créer les indices pour ce type de division.</br>\nPour la validation croisée k-fold de groupe, les données sont divisées de sorte qu'aucun groupe ne soit contenu à la fois dans les ensembles de modélisation et de validation. Un ou plusieurs groupes pourraient être laissés de côté, selon la valeur de k.</br>\n<b>Valeur</b><br/>\nUne liste ou une matrice d'entiers de position de ligne correspondant aux données d'entraînement. Pour createTimeSlices, les sous-échantillons sont nommés par l'index de fin de chaque sous-échantillon d'entraînement.</br>\n<b>Paquet</b></br>\ncaret</br>\nklaR</br>\n<b>Aide</b></br>\nhelp(createDataPartition, package=\"caret\")\n        "
  }
}