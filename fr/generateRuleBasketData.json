{
  "title": "Générer des règles, format panier",
  "navigation": "Générer des règles, format panier",
  "src": "Colonnes",
  "datasetcol": "Variable unique avec plusieurs éléments",
  "separator": "Entrez le séparateur pour les éléments dans le panier",
  "prunerules": "Élaguer les règles",
  "graphs": "Afficher les visualisations",
  "test3": "Différence < 0",
  "txtbox2": "Hypothèse nulle (mu)",
  "txtbox1": "Niveau de confiance",
  "label1": "Générer des règles",
  "rulesobj": "Nom de l'objet de règles",
  "rulesobjhint": "Cet objet contient toutes les règles et peut être spécifié dans d'autres dialogues connexes. c'est-à-dire Afficher les règles, Tracer les règles",
  "support": "Valeur de support minimum",
  "supphint": "Le support d'un ou plusieurs éléments est la fraction des transactions dans l'ensemble de données qui contiennent cet ou ces éléments.",
  "confidence": "Valeur de confiance minimum",
  "confhint": "La confiance d'une règle est la probabilité qu'elle soit vraie pour une nouvelle transaction contenant les éléments du LHS de la règle",
  "advoptions": "Options avancées",
  "minlen": "Nombre minimum d'éléments à gauche",
  "maxlen": "Nombre maximum d'éléments à gauche",
  "sortopt": "Options de tri",
  "sortby": "Trier par",
  "rd1": "Confiance",
  "rd2": "Lift",
  "rd3": "Support",
  "sortord": "Ordre de tri",
  "increasing": "Ascendant",
  "decreasing": "Descendant",
  "noofrules": "Nombre de règles à afficher",
  "rulecount": "",
  "fromto": "Afficher les règles",
  "from": "De",
  "to": "À",
  "help": {
    "title": "Générer des règles, format panier",
    "r_help": "help(apriori, package='arules')",
    "body": "\n            <b>\n            REMARQUE : En fonction du format des données, vous choisirez soit le 'format de données de panier' soit le 'format de transaction multi-lignes' ou le format multi-variable. Un ensemble distinct de dialogues est fourni pour chacun de ces formats de données. Voir ci-dessous pour les détails :\n            </b>\n            <br/><br/>\n            <b>\n            Format de données de panier\n            </b>\n            <br/>\n            Avec le format de données de panier, tous les éléments d'un seul panier sont contenus dans une seule colonne de l'ensemble de données. Plusieurs éléments sont séparés par un caractère unique comme une virgule(,) , un point-virgule (;) ou un deux-points (:), etc.\n            <br/>\n            <b>\n            Exemple 1\n            </b>\n            <table style=\"border: 1px solid ; border-collapse: collapse;\">\n            <tr>\n              <th style=\"border: 1px solid ; border-collapse: collapse;\">Éléments</th>\n            </tr>\n            <tr>\n              <td style=\"border: 1px solid ; border-collapse: collapse;\">item10,item20,item23,item24</td>\n            </tr>\n            <tr>\n              <td style=\"border: 1px solid ; border-collapse: collapse;\">item12,item13,item43</td>\n            </tr>\n            <tr>\n              <td style=\"border: 1px solid ; border-collapse: collapse;\">item12,item14,item32</td>\n            </tr>            \n          </table> \n\n          <br/>\n          <b>\n          Exemple 2\n          </b>\n          <table style=\"border: 1px solid ; border-collapse: collapse;\">\n          <tr>\n            <th style=\"border: 1px solid ; border-collapse: collapse;\">Éléments alimentaires</th>\n          </tr>\n          <tr>\n            <td style=\"border: 1px solid ; border-collapse: collapse;\">pommes,mangues,bière</td>\n          </tr>\n          <tr>\n            <td style=\"border: 1px solid ; border-collapse: collapse;\">lait,poulet,fromage</td>\n          </tr>\n          <tr>\n            <td style=\"border: 1px solid ; border-collapse: collapse;\">pommes,vins,fromage</td>\n          </tr>            \n        </table>    \n        <br/>\n        <br>\n        <b>\n        Format de données de transaction multi-lignes\n        </b>\n        <br/>\n        Avec le format de transaction, chaque élément d'un seul panier est représenté dans une ligne séparée. Toutes les lignes représentant des éléments dans un seul panier contiennent un identifiant de transaction commun. L'identifiant de transaction est capturé dans une colonne séparée        \n        <br/>\n        <b>\n        Exemple 1\n        </b>\n        <table style=\"border: 1px solid ; border-collapse: collapse;\">\n        <tr>\n          <th style=\"border: 1px solid ; border-collapse: collapse;\">ID</th>\n          <th style=\"border: 1px solid ; border-collapse: collapse;\">Éléments</th>\n        </tr>\n        <tr>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">1</td>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">Pain</td>\n        </tr>\n        <tr>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">1</td>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">Beurre</td>\n        </tr>\n        <tr>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">Viande</td>\n        </tr>      \n        <tr>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">Œufs</td>\n        </tr>\n        <tr>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">Fromage</td>\n        </tr>\n        <tr>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n          <td style=\"border: 1px solid ; border-collapse: collapse;\">Lait</td>\n        </tr>                              \n      </table> \n      <br/>\n      Donc le panier 1 contient du pain et du beurre et le panier 2 contient de la viande, des œufs, du fromage et du lait\n\n      <br/><br/>\n      <b>\n      Format de données multi-variables\n      </b>\n      <br/>\n      Dans ce format, chaque niveau d'une variable dans un ensemble de données représente un élément. Chaque ligne de l'ensemble de données représente un panier. Voir ci-dessous\n      <br/>\n      <b>\n      Exemple 1\n      </b>\n      <table style=\"border: 1px solid ; border-collapse: collapse;\">\n      <tr>\n        <th style=\"border: 1px solid ; border-collapse: collapse;\">Produits de boulangerie</th>\n        <th style=\"border: 1px solid ; border-collapse: collapse;\">Produits laitiers</th>\n        <th style=\"border: 1px solid ; border-collapse: collapse;\">Viande</th>\n        <th style=\"border: 1px solid ; border-collapse: collapse;\">Légumes</th>        \n      </tr>\n      <tr>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">Pain</td>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">Lait</td>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">Poulet</td>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">Tomates</td>\n      </tr>\n      <tr>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">NA</td>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">Fromage</td>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">NA</td>\n        <td style=\"border: 1px solid ; border-collapse: collapse;\">Oignons</td>\n      </tr>\n    </table> \n    <br/>\n    La case à cocher élaguer les règles vous permet d'élaguer les règles. Lorsqu'elle est sélectionnée, les règles redondantes sont affichées et le modèle élagué avec les règles redondantes supprimées est enregistré et affiché. \n    <br/>\n    En cliquant sur la case à cocher afficher les visualisations, des graphiques sont affichés. Nous avons commenté le  #plot(rule1, method =\"paracoord\",control = list(reorder=TRUE)) car cela peut prendre beaucoup de temps à exécuter. Vous pouvez coller la syntaxe et exécuter la commande manuellement.\n    <br/>\n    <br/>\n    <b>\n    Sortie\n    </b>\n    <br/>\n    Les résultats sont affichés au format tabulaire\n    <br/>\n    Les colonnes du tableau sont ci-dessous\n    <br/><br/>\n    <b>LHS :</b> Ceux-ci représentent les éléments dans le panier\n    <br/><br/>\n    <b>RHS :</b> Étant donné les éléments dans le panier (LHS), le RHS contient un seul élément qui sera probablement acheté\n    <br/><br/>\n    <b>Support :</b> Le support est la fraction des transactions dans l'ensemble de données qui contiennent les éléments sur le LHS\n    <br/><br/>\n    <b>Confiance :</b> La confiance est la probabilité conditionnelle qu'un client achetant des éléments sur le LHS achètera également l'élément sur le RHS\n    <br/><br/>\n    <b>Lift :</b> Si quelqu'un achète des éléments sur le LHS, quel serait le % de chance d'acheter un produit sur le RHS augmenterait. Donc, fondamentalement, combien notre confiance a augmenté que le RHS sera acheté étant donné que le LHS est acheté. Si le lift est >1, la présence d'éléments sur le LHS a augmenté la probabilité que les éléments sur le RHS se produisent dans la transaction, si <1, la présence d'éléments sur le LHS diminuera la probabilité que les éléments sur le RHS, si =1, alors LHS et RHS sont indépendants\n    <br/><br/>\n    Pour plus de détails, voir \n    <br/><br/>\n    http://infocenter.informationbuilders.com/wf80/index.jsp?topic=%2Fpubdocs%2FRStat16%2Fsource%2Ftopic49.htm\n    <br/><br/>\n    https://discourse.snowplowanalytics.com/t/market-basket-analysis-identifying-products-and-content-that-go-well-together/1132\n    <br/><br/>\n    http://www.listendata.com/2015/12/market-basket-analysis-with-r.html\n    <br/><br/>\n    http://www.salemmarafi.com/code/market-basket-analysis-with-r/\n    <br/><br/>\n\n    <b>Package : arules</b> \n    <br/><br/>\n    <b>Description</b> \n    <br/>\n    Mine des ensembles d'éléments fréquents, des règles d'association ou des hyperarêtes d'association en utilisant l'algorithme Apriori. L'algorithme Apriori utilise une recherche par niveaux pour les ensembles d'éléments fréquents. L'implémentation d'Apriori utilisée comprend certaines améliorations (par exemple, un arbre préfixe et un tri des éléments).\n    <br/><br/>\n    <b>Utilisation</b> \n    <br/>\n    <code>\n    apriori(data, parameter = NULL, appearance = NULL, control = NULL)\n    </code>\n    <br/><br/>\n\n    <b>Arguments</b><br/>\n    <ul>\n    <li>\n    data : objet de classe transactions ou toute structure de données qui peut être convertie en transactions (par exemple, une matrice binaire ou un data.frame).\n    </li>\n    <li>\n    parameter : objet de classe APparameter ou liste nommée. Le comportement par défaut est de miner des règles avec un support minimum de 0.1, une confiance minimum de 0.8, un maximum de 10 éléments (maxlen), et un temps maximal pour le contrôle des sous-ensembles de 5 secondes (maxtime).\n    </li>\n    <li>\n    appearance : objet de classe APappearance ou liste nommée. Avec cet argument, l'apparence des éléments peut être restreinte (implémente des modèles de règles). Par défaut, tous les éléments peuvent apparaître sans restriction.\n    </li>\n    <li>\n    control : objet de classe APcontrol ou liste nommée. Contrôle la performance algorithmique de l'algorithme d'extraction (tri des éléments, rapport de progression (verbose), etc.)\n    </li>\n    </ul>\n    <br/><br/>\n    <b>Détails</b><br/>\n    Appelle l'implémentation C de l'algorithme Apriori par Christian Borgelt pour miner des ensembles d'éléments fréquents, des règles ou des hyperarêtes.\n    <br/><br/>\n\n    <b>Remarque</b>\n    Apriori ne crée que des règles avec un élément dans le RHS (Conséquent) ! La valeur par défaut dans APparameter pour minlen est 1. Cela signifie que des règles avec un seul élément (c'est-à-dire un antécédent/LHS vide) comme\n    <br/><br/>\n    <code>{} => {bière}</code>\n    <br/><br/>\n    seront créées. Ces règles signifient que peu importe quels autres éléments sont impliqués, l'élément dans le RHS apparaîtra avec la probabilité donnée par la confiance de la règle (qui est égale au support). Si vous souhaitez éviter ces règles, utilisez l'argument parameter=list(minlen=2).\n    <br/><br/>\n    <b>Remarques sur le temps d'exécution et l'utilisation de la mémoire :</b>\n    Si le support minimum est choisi trop bas pour l'ensemble de données, alors l'algorithme essaiera de créer un ensemble extrêmement large d'ensembles d'éléments/règles. Cela entraînera un temps d'exécution très long et finalement le processus manquera de mémoire. Pour éviter cela, la longueur maximale par défaut des ensembles d'éléments/règles est limitée à 10 éléments (via le paramètre élément maxlen=10) et le temps pour vérifier les sous-ensembles est limité à 5 secondes (via maxtime=5). La sortie indiquera si vous avez atteint ces limites dans la ligne \"vérification des sous-ensembles\" de la sortie. La limite de temps n'est vérifiée que lorsque la taille du sous-ensemble augmente, donc cela peut prendre beaucoup plus de temps que ce que vous spécifiez dans maxtime. Définir maxtime=0 désactive la limite de temps.\n    <br/>Interrompre l'exécution avec Control-C/Esc n'est pas recommandé. Le nettoyage de la mémoire sera empêché, ce qui entraînera une fuite de mémoire. De plus, les interruptions ne sont vérifiées que lorsque la taille du sous-ensemble augmente, donc cela peut prendre un certain temps avant que l'exécution s'arrête réellement.\n    <br/><br/>\n    <b>Valeur</b><br/><br/>\n    Renvoie un objet de classe règles ou ensembles d'éléments.\n    <br/>"
  }
}