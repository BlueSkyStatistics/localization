{
  "title": "Exemple de distribution Gamma",
  "navigation": "Exemple de distribution Gamma",
  "entrdsname": "Entrez le nom du jeu de données",
  "shape": "Forme",
  "scale": "Échelle (taux inverse)",
  "lblnoofsamples": "Nombre d'échantillons (lignes)",
  "lblnoofobsv": "Nombre d'observations (colonnes)",
  "lblseed": "Graine",
  "lblAddtoDS": "Ajouter au jeu de données",
  "chklbl1": "Moyennes d'échantillons",
  "chklbl2": "Sommes d'échantillons",
  "chklbl3": "Écarts-types d'échantillons",
  "help": {
    "title": "Exemple de distribution Gamma",
    "r_help": "help(rgamma, package=stats)",
    "body": "\n            ​​\n            <b>Description</b>\n            <br/>\n            Densité, fonction de distribution, fonction quantile et génération aléatoire pour la distribution Gamma avec les paramètres forme et échelle.\n            <br/>\n            <b>Utilisation</b>\n            <br/>\n            <code>\n                dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)\n                <br/>\n                pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                rgamma(n, shape, rate = 1, scale = 1/rate)\n                <br/>\n            </code>\n            <br/>\n            <b>Arguments</b>\n            <br/>\n            <ul>\n                <li></li>\n                <li>x, q : vecteur de quantiles.</li>\n                \n                \n                <li>p : vecteur de probabilités.</li>\n                \n                \n                <li>n : nombre d'observations. Si length(n) > 1, la longueur est considérée comme le nombre requis.</li>\n                \n                \n                <li>rate : une manière alternative de spécifier l'échelle.</li>\n                \n                \n                <li>shape, scale : paramètres de forme et d'échelle. Doivent être positifs, échelle strictement.</li>\n                \n                \n                <li>log, log.p : logique; si TRUE, les probabilités/densités p sont retournées sous forme de log(p).</li>\n                \n                \n                <li>lower.tail : logique; si TRUE (par défaut), les probabilités sont P[X ≤ x], sinon, P[X > x].</li>\n            </ul>\n            \n            \n            \n            <br/>\n            Détails\n            <br/>\n            Si l'échelle est omise, elle suppose la valeur par défaut de 1.\n            <br/>\n            La distribution Gamma avec les paramètres shape = a et scale = s a la densité\n            <br/>\n            <code>f(x)= 1/(s^a Gamma(a)) x^(a-1) e^-(x/s)</code>\n            <br/>\n            pour x ≥ 0, a > 0 et s > 0. (Ici Gamma(a) est la fonction implémentée par gamma() de R et définie dans son aide. Notez que a = 0 correspond à la distribution triviale avec toute la masse au point 0.)\n            <br/>\n            La moyenne et la variance sont <code>E(X) = a*s et Var(X) = a*s^2.</code>\n            <br/>\n            Le risque cumulatif <code>H(t) = - log(1 - F(t))</code> est\n            <br/>\n            -pgamma(t, ..., lower = FALSE, log = TRUE)\n            <br/>\n            Notez que pour des valeurs de forme petites (et une échelle modérée), une grande partie de la masse de la distribution Gamma est sur des valeurs de x si proches de zéro qu'elles seront représentées comme zéro dans l'arithmétique informatique. Ainsi, rgamma peut bien retourner des valeurs qui seront représentées comme zéro. (Cela se produira également pour des valeurs très grandes d'échelle puisque la génération réelle est effectuée pour scale = 1.)\n            <br/>\n            <br/><b>Valeur</b>\n            <br/>\n            dgamma donne la densité, pgamma donne la fonction de distribution, qgamma donne la fonction quantile, et rgamma génère des déviations aléatoires.\n            <br/>\n            Des arguments invalides entraîneront un retour de valeur NaN, avec un avertissement.\n            <br/>\n            La longueur du résultat est déterminée par n pour rgamma, et est le maximum des longueurs des arguments numériques pour les autres fonctions.\n            <br/>\n            Les arguments numériques autres que n sont recyclés à la longueur du résultat. Seuls les premiers éléments des arguments logiques sont utilisés.\n            <br/>\n            <br/><b>Remarque</b>\n            <br/>\n            La paramétrisation S (Becker et al, 1988) était via shape et rate : S n'avait pas de paramètre d'échelle. Il est erroné de fournir à la fois une échelle et un taux.\n            <br/>\n            pgamma est étroitement lié à la fonction gamma incomplète. Comme défini par Abramowitz et Stegun 6.5.1 (et par 'Numerical Recipes'), ceci est\n            <br/>\n            <code>P(a,x) = 1/Gamma(a) integral_0^x t^(a-1) exp(-t) dt</code>\n            <br/>\n            P(a, x) est pgamma(x, a). D'autres auteurs (par exemple Karl Pearson dans ses tableaux de 1922) omettent le facteur de normalisation, définissant la fonction gamma incomplète γ(a,x) comme gamma(a,x) = integral_0^x t^(a-1) exp(-t) dt, c'est-à-dire pgamma(x, a) * gamma(a). D'autres utilisent la fonction gamma incomplète 'supérieure',\n            <br/>\n            <code>Gamma(a,x) = integral_x^Inf t^(a-1) exp(-t) dt,</code>\n            <br/>\n            qui peut être calculée par pgamma(x, a, lower = FALSE) * gamma(a).\n            <br/>\n            Notez cependant que pgamma(x, a, ..) nécessite actuellement a > 0, tandis que la fonction gamma incomplète est également définie pour a négatif. Dans ce cas, vous pouvez utiliser gamma_inc(a,x) (pour Γ(a,x)) du package gsl.\n            <br/>\n            Voir aussi https://en.wikipedia.org/wiki/Incomplete_gamma_function, ou http://dlmf.nist.gov/8.2#i.            \n"
  }
}