{
  "title": "Graphique de Distribution Uniforme",
  "navigation": "Graphique de Distribution Uniforme",
  "min": "Minimum",
  "max": "Maximum",
  "pdenfun": "Tracer la fonction de densité",
  "pdstfun": "Tracer la fonction de distribution",
  "lblregions": "Spécifiez éventuellement des régions sous la fonction de densité par",
  "xvals": "valeurs x",
  "quantiles": "quantiles",
  "lblRegFill": "Régions à remplir (spécifiez une ou deux, ou laissez vide)",
  "lblreg1": "Région 1 :",
  "lblreg2": "Région 2 :",
  "lblregfrm": "De",
  "lblregto": "À",
  "lblregcol": "Couleur",
  "lblLegPos": "Position de la légende",
  "toprt": "En haut à droite",
  "toplt": "En haut à gauche",
  "topmid": "En haut au centre",
  "help": {
    "title": "Graphique de Distribution Uniforme",
    "r_help": "help(qunif, package=stats)",
    "body": "\n            ​​\n            <b>Description</b>\n            <br/>\n            Ces fonctions fournissent des informations sur la distribution uniforme sur l'intervalle de min à max. dunif donne la densité, punif donne la fonction de distribution, qunif donne la fonction quantile et runif génère des déviations aléatoires.\n            <br/>\n            <b>Utilisation</b>\n            <br/>\n            <code>\n                dunif(x, min = 0, max = 1, log = FALSE)\n                <br/>\n                punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                runif(n, min = 0, max = 1)\n                <br/>\n            </code>\n            <br/>\n            <b>Arguments</b>\n            <br/>\n            <ul>\n                <li>x, q : vecteur de quantiles.</li>\n                \n                \n                <li>p : vecteur de probabilités.</li>\n                \n                \n                <li>n : nombre d'observations. Si la longueur(n) > 1, la longueur est prise comme étant le nombre requis.</li>\n                \n                \n                <li>min, max : limites inférieure et supérieure de la distribution. Doivent être finies.</li>\n                \n                \n                <li>log, log.p : logique ; si TRUE, les probabilités p sont données sous forme de log(p).</li>\n                \n                \n                <li>lower.tail : logique ; si TRUE (par défaut), les probabilités sont P[X ≤ x], sinon, P[X > x].</li>\n            </ul>\n            \n            \n            \n            <br/>\n            <b>Détails</b>\n            <br/>\n            Si min ou max ne sont pas spécifiés, ils prennent les valeurs par défaut de 0 et 1 respectivement.\n            <br/>\n            La distribution uniforme a une densité\n            <br/>\n            <code>f(x) = 1/(max-min)</code>\n            <br/>\n            pour min ≤ x ≤ max.\n            <br/>\n            Dans le cas où u := min == max, le cas limite de X == u est supposé, bien qu'il n'y ait pas de densité dans ce cas et que dunif renvoie NaN (la condition d'erreur).\n            <br/>\n            runif ne générera ni l'une ni l'autre des valeurs extrêmes à moins que max = min ou que max-min soit petit par rapport à min, et en particulier pas pour les arguments par défaut.\n            <br/>\n            <br/><b>Valeur</b>\n            <br/>\n            dunif donne la densité, punif donne la fonction de distribution, qunif donne la fonction quantile, et runif génère des déviations aléatoires.\n            <br/>\n            La longueur du résultat est déterminée par n pour runif, et est le maximum des longueurs des arguments numériques pour les autres fonctions.\n            <br/>\n            Les arguments numériques autres que n sont recyclés à la longueur du résultat. Seuls les premiers éléments des arguments logiques sont utilisés.\n            <br/>\n            <br/><b>Remarque</b>\n            <br/>\n            Les caractéristiques de sortie des générateurs de nombres pseudo-aléatoires (telles que la précision et la périodicité) varient largement. Voir .Random.seed pour plus d'informations sur les algorithmes de génération de nombres aléatoires de R.            \n      "
  }
}