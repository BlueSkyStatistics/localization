{
  "title": "Dal ve Yaprak Grafiği",
  "navigation": "Dal ve Yaprak",
  "Destination": "Grafiği çizmek için değişkeni seçin",
  "label1": "Yaprak rakamı",
  "label2": "Dal başına parçalar",
  "label3": "Bölünmüş dalların stili",
  "label4": "Seçenekler",
  "Value": "Bir değer girin",
  "Automatic": "Otomatik",
  "EnterValue": "Değeri belirtin",
  "StemAutomatic": "Otomatik",
  "SpecifyStemValue": "Değeri belirtin",
  "StemValue": "Bir değer girin",
  "Tukey": "Tukey",
  "Repeated": "Tekrarlanan dal rakamları",
  "Trim": "Aykırı değerleri kes",
  "Depths": "Derinlikleri göster",
  "NegativeLeaves": "Negatif yaprakları ters çevir",
  "help": {
    "title": "Dal ve Yaprak Grafiği",
    "r_help": "help(stem.leaf, package='aplpack')",
    "body": "\n            <b>Açıklama</b></br>\n            dal ve yaprak görüntüsü ve arka arkaya dal ve yaprak görüntüsü\n            Klasik (\"Tukey tarzı\") dal ve yaprak görüntüsü / arka arkaya dal ve yaprak görüntüsü oluşturur.\n            <br/>\n            <b>Kullanım</b>\n            <br/>\n            <code> \n            stem.leaf(data, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \"Sturges\"),\n                style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, depths = TRUE,\n                reverse.negative.leaves = TRUE, na.rm = FALSE, printresult = TRUE)<br/><br/>\n            stem.leaf.backback(x,y, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \n                \"Sturges\"), style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, \n                depths = TRUE, reverse.negative.leaves = TRUE, na.rm = FALSE,\n                printresult=TRUE, show.no.depths = FALSE, add.more.blanks = 0,\n                back.to.back = TRUE)\n            </code> <br/>\n            <b>Argümanlar</b><br/>\n            <ul>\n            <li>\n            data: sayısal bir veri vektörü\n            </li>\n            <li>\n            x: stem.leaf.backback için ilk veri seti\n            </li>\n            <li>\n            y: stem.leaf.backback için ikinci veri seti\n            </li>\n            <li>\n            unit: yaprak birimi, 10'un kuvveti olarak (örneğin, 100, .01); birim eksikse, birim stem.leaf tarafından seçilir.\n            </li>\n            <li>\n            m: her dalın ayrılacağı parça sayısı (1, 2 veya 5); m eksikse, parça sayısı/stem (m) stem.leaf tarafından seçilir.\n            </li>\n            <li>\n            Min: en küçük dışlayıcı olmayan değer; otomatik seçim için atlayın.\n            </li>\n            <li>\n            Max: en büyük dışlayıcı olmayan değer; otomatik seçim için atlayın.\n            </li>\n            <li>\n            rule.line: görüntüde istenen satır sayısını seçmek için kullanılacak kural; \"Dixon\" = 10*log10(n); \"Velleman\" = 2*sqrt(n); \"Sturges\" = 1 + log2(n); varsayılan \"Dixon\"'dır.\n            </li>\n            <li>\n            style: \"Tukey\" (varsayılan) \"Tukey tarzı\" bölünmüş dallar için; \"bare\" yalnızca dal rakamlarını tekrar eden bölünmüş dallar için.\n            </li>\n            <li>\n            trim.outliers: eğer TRUE (varsayılan), aykırı değerler LO ve HI dallarına yerleştirilir.\n            </li>\n            <li>\n            depths: eğer TRUE (varsayılan), dalların soluna \"derinlikler\" sütunu yazdırılır; medyanı içeren dalın derinliği parantez içinde dal sayısıdır.\n            </li>\n            <li>\n            reverse.negative.leaves: eğer TRUE (varsayılan), negatif dallardaki yaprakların yönünü ters çevirir (yani, örneğin, yaprak 9 yaprak 8'den önce gelir, vb.).\n            </li>\n            <li>\n            na.rm: eğer TRUE \"NA\" değerleri kaldırılır, aksi takdirde NA sayısı sayılır.\n            </li>\n            <li>\n            printresult: eğer TRUE, dal ve yaprak görüntüsünün çıktısı cat ile yazdırılır.\n            </li>\n            <li>\n            show.no.depths: eğer TRUE, derinlikler yazdırılmaz.\n            </li>\n            <li>\n            add.more.blanks: yaprakların yanı sıra eklenen boşluk sayısı.\n            </li>\n            <li>\n            back.to.back: eğer FALSE ise, iki paralel dal ve yaprak görüntüsü oluşturulur.\n            </li>\n            </ul>\n            <b>Ayrıntılar</b></br>\n            Temel paketteki dal işlevinin aksine, stem.leaf klasik dal ve yaprak görüntüleri üretir, Tukey'nin Keşifsel Veri Analizi'nde açıklandığı gibi. stem.leaf.backback işlevi arka arkaya dal ve yaprak görüntüleri oluşturur.\n            <br/>\n            <b>Değer</b></br>\n            Hesaplanan dal ve yaprak görüntüsü yazdırılır. Gizlice stem.leaf, bilgi (açıklama), görüntü (dal ve yaprak görüntüsü karakter vektörü olarak), alt (çok küçük değerler), üst (çok büyük değerler), derinlikler (derinlikler vektörü), dal (dal bilgisi vektörü olarak) ve yapraklar (yapraklar vektörü) içeren bir liste olarak dal ve yaprak görüntüsünü döndürür.</br>\n            <b>Örnekler</b></br>\n            stem.leaf(co2)\n            stem.leaf.backback(co2[1:120],co2[121:240])</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE,\n                               add.more.blanks = 3, show.no.depths = TRUE)</br>\n            stem.leaf.backback(rivers[-(1:30)],rivers[1:30], back.to.back = FALSE, unit=10, m=5, \n                               Min=200, Max=900, add.more.blanks = 20, show.no.depths = TRUE)</br>\n            <b>Paket</b></br>\n            aplpack</br>\n            <b>Yardım</b></br>\n            help(stem.leaf, package=aplpack)</br>\n    "
  }
}