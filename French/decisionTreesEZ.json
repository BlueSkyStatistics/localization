{
  "title": "Arbres de Décision",
  "navigation": "Arbres de Décision",
  "TxtTreeName": "Entrez le nom du modèle",
  "TreeGenChkbox": "Ne pas régénérer si l'arbre existe déjà",
  "dependent": "Variable dépendante",
  "independent": "Variable(s) indépendante(s)",
  "weights": "Poids d'enquête",
  "TxtMinSplit": "Division minimale",
  "minBucket": "Seau minimum",
  "TxtCP": "Paramètre de complexité",
  "maxDepth": "Profondeur maximale",
  "PruneTreeChkbox": "Élaguer l'arbre",
  "rd0": "Ne pas élaguer",
  "rd1": "Utiliser le paramètre de complexité optimal",
  "rd2": "Spécifier le paramètre de complexité",
  "TxtCPPrune": "Entrez le paramètre de complexité",
  "PlotCVChkbox": "Tracer la validation croisée",
  "PlotRSQRChkbox": "Tracer le R-carré",
  "help": {
    "title": "Arbres de Décision",
    "r_help": "help(rpart, package ='rpart')",
    "body": "\n                <b>Note</b></br>\n                Les variables dépendantes peuvent être des facteurs, ordinales, chaînes, logiques et numériques</br>\n                Les variables indépendantes peuvent être des facteurs, ordinales, chaînes, logiques et numériques</br></br>\n                <b>Description</b></br>\n                Ajuster un modèle d'Arbre de Partitionnement Récursif et de Régression\n                <br/>\n                <b>Utilisation</b>\n                <br/>\n                <code> \n                rpart(formula, data, weights, subset, na.action = na.rpart, method,\n                      model = FALSE, x = FALSE, y = TRUE, parms, control, cost, ...)\n                </code> <br/>\n                <b>Arguments</b><br/>\n                <ul>\n                <li>\n                formula: une formule, avec une réponse mais sans termes d'interaction. Si c'est un cadre de données, cela est pris comme le cadre du modèle (voir model.frame).\n                </li>\n                <li>\n                data: un cadre de données optionnel dans lequel interpréter les variables nommées dans la formule.\n                </li>\n                <li>\n                weights: poids de cas optionnels.\n                </li>\n                <li>\n                subset: expression optionnelle disant qu'un sous-ensemble des lignes des données doit être utilisé dans l'ajustement.\n                </li>\n                <li>\n                na.action: l'action par défaut supprime toutes les observations pour lesquelles y est manquant, mais conserve celles pour lesquelles un ou plusieurs prédicteurs sont manquants.\n                </li>\n                <li>\n                method: l'un de \"anova\", \"poisson\", \"class\" ou \"exp\". Si la méthode est manquante, la routine essaie de faire une supposition intelligente. Si y est un objet de survie, alors method = \"exp\" est supposé, si y a 2 colonnes alors method = \"poisson\" est supposé, si y est un facteur alors method = \"class\" est supposé, sinon method = \"anova\" est supposé. Il est plus sage de spécifier la méthode directement, surtout à mesure que d'autres critères peuvent être ajoutés à la fonction à l'avenir.\n                Alternativement, la méthode peut être une liste de fonctions nommées init, split et eval. Des exemples sont donnés dans le fichier 'tests/usersplits.R' dans les sources, et dans les vignettes 'Fonctions de Division Écrites par l'Utilisateur'.\n                </li>\n                <li>\n                model: si logique: garder une copie du cadre du modèle dans le résultat ? Si la valeur d'entrée pour le modèle est un cadre de modèle (probablement d'un appel antérieur à la fonction rpart), alors ce cadre est utilisé plutôt que de construire de nouvelles données.\n                </li>\n                <li>\n                x: garder une copie de la matrice x dans le résultat.\n                </li>\n                <li>\n                y: garder une copie de la variable dépendante dans le résultat. Si manquant et que le modèle est fourni, cela par défaut à FALSE.\n                </li>\n                <li>\n                parms: paramètres optionnels pour la fonction de division.<br/>\n                La division Anova n'a pas de paramètres.<br/>\n                La division Poisson a un seul paramètre, le coefficient de variation de la distribution a priori sur les taux. La valeur par défaut est 1.<br/>\n                La division Exponentielle a le même paramètre que Poisson.<br/>\n                Pour la division de classification, la liste peut contenir l'un des éléments suivants : le vecteur de probabilités a priori (composant a priori), la matrice de perte (composant perte) ou l'indice de division (composant division). Les a priori doivent être positifs et somme à 1. La matrice de perte doit avoir des zéros sur la diagonale et des éléments positifs hors-diagonale. L'indice de division peut être gini ou information. Les a priori par défaut sont proportionnels aux comptes de données, les pertes par défaut à 1, et la division par défaut à gini.<br/>\n                </li>\n                <li>\n                control: une liste d'options qui contrôlent les détails de l'algorithme rpart. Voir rpart.control.\n                </li>\n                <li>\n                cost: un vecteur de coûts non négatifs, un pour chaque variable dans le modèle. Par défaut à un pour toutes les variables. Ce sont des mises à l'échelle à appliquer lors de la prise en compte des divisions, donc l'amélioration sur la division d'une variable est divisée par son coût pour décider quelle division choisir.\n                </li>\n                <li>\n                ...: des arguments à rpart.control peuvent également être spécifiés dans l'appel à rpart. Ils sont vérifiés par rapport à la liste des arguments valides.\n                </li>\n                </ul>\n                <b>Détails</b></br>\n                Cela diffère de la fonction tree dans S principalement dans sa gestion des variables de substitution. Dans la plupart des détails, cela suit de près Breiman et al. (1984). Le package R tree fournit une ré-implémentation de tree.\n                <b>Valeur</b></br>\n                Un objet de classe rpart. Voir rpart.object.</br>\n                <b>Références</b></br>\n                Breiman L., Friedman J. H., Olshen R. A., et Stone, C. J. (1984) Arbres de Classification et de Régression. Wadsworth.</br>\n                <b>Voir Aussi</b></br>\n                rpart.control, rpart.object, summary.rpart, print.rpart</br>\n                <b>Exemples</b></br>\n                fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)</br>\n                fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,\n                              parms = list(prior = c(.65,.35), split = \"information\"))</br>\n                fit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,\n                              control = rpart.control(cp = 0.05))</br>\n                par(mfrow = c(1,2), xpd = NA) # sinon sur certains appareils le texte est coupé</br>\n                plot(fit)</br>\n                text(fit, use.n = TRUE)</br>\n                plot(fit2)</br>\n                text(fit2, use.n = TRUE)</br>\n                <b>Package</b></br>\n                rpart;rpart.plot;partykit</br>\n                <b>Aide</b></br>\n                help(rpart, package ='rpart')</br></br>\n                <b>Description</b></br>\n                Contrôle pour les Ajustements Rpart. Divers paramètres qui contrôlent les aspects de l'ajustement rpart.\n                <br/>\n                <b>Utilisation</b>\n                <br/>\n                <code> \n                rpart.control(minsplit = 20, minbucket = round(minsplit/3), cp = 0.01, \n                              maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10,\n                              surrogatestyle = 0, maxdepth = 30, ...)\n                </code> <br/>\n                <b>Arguments</b><br/>\n                <ul>\n                <li>\n                minsplit: le nombre minimum d'observations qui doivent exister dans un nœud afin qu'une division soit tentée.\n                </li>\n                <li>\n                minbucket: le nombre minimum d'observations dans n'importe quel nœud terminal <leaf>. Si seulement l'un de minbucket ou minsplit est spécifié, le code définit soit minsplit à minbucket*3 ou minbucket à minsplit/3, selon le cas.\n                </li>\n                <li>\n                cp: paramètre de complexité. Toute division qui ne diminue pas le manque d'ajustement global d'un facteur de cp n'est pas tentée. Par exemple, avec la division anova, cela signifie que le R-carré global doit augmenter de cp à chaque étape. Le rôle principal de ce paramètre est de gagner du temps de calcul en élaguant les divisions qui ne valent manifestement pas la peine. Essentiellement, l'utilisateur informe le programme que toute division qui n'améliore pas l'ajustement de cp sera probablement élaguée par validation croisée, et que donc le programme n'a pas besoin de la poursuivre.\n                </li>\n                <li>\n                maxcompete: le nombre de divisions concurrentes retenues dans la sortie. Il est utile de savoir non seulement quelle division a été choisie, mais quelle variable est venue en deuxième, troisième, etc.\n                </li>\n                <li>\n                maxsurrogate: le nombre de divisions de substitution retenues dans la sortie. Si cela est défini à zéro, le temps de calcul sera réduit, car environ la moitié du temps de calcul (autre que la configuration) est utilisée dans la recherche de divisions de substitution.\n                </li>\n                <li>\n                usesurrogate: comment utiliser les substituts dans le processus de division. 0 signifie afficher uniquement ; une observation avec une valeur manquante pour la règle de division primaire n'est pas envoyée plus loin dans l'arbre. 1 signifie utiliser des substituts, dans l'ordre, pour diviser les sujets manquant la variable primaire ; si tous les substituts sont manquants, l'observation n'est pas divisée. Pour la valeur 2, si tous les substituts sont manquants, alors envoyer l'observation dans la direction majoritaire. Une valeur de 0 correspond à l'action de l'arbre, et 2 aux recommandations de Breiman et al. (1984).\n                </li>\n                <li>\n                xval: nombre de validations croisées.\n                </li>\n                <li>\n                surrogatestyle: contrôle la sélection d'un meilleur substitut. Si défini à 0 (par défaut), le programme utilise le nombre total de classifications correctes pour une variable substitutive potentielle, si défini à 1, il utilise le pourcentage correct, calculé sur les valeurs non manquantes du substitut. La première option pénalise plus sévèrement les covariables avec un grand nombre de valeurs manquantes.\n                </li>\n                <li>\n                maxdepth: Définir la profondeur maximale de tout nœud de l'arbre final, le nœud racine étant compté comme profondeur 0. Des valeurs supérieures à 30 donneront des résultats absurdes sur les machines 32 bits.\n                </li>\n                <li>\n                ...: nettoyer d'autres arguments.\n                </li>\n                </ul>\n                <b>Valeur</b></br>\n                Une liste contenant les options. \n                      "
  }
}