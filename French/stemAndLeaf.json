{
  "title": "Diagramme en tiges et feuilles",
  "navigation": "Tiges et feuilles",
  "Destination": "Sélectionnez la variable à tracer",
  "label1": "Chiffre des feuilles",
  "label2": "Parts par tige",
  "label3": "Style des tiges divisées",
  "label4": "Options",
  "Value": "Entrez une valeur",
  "Automatic": "Automatique",
  "EnterValue": "Spécifiez la valeur",
  "StemAutomatic": "Automatique",
  "SpecifyStemValue": "Spécifiez la valeur",
  "StemValue": "Entrez une valeur",
  "Tukey": "Tukey",
  "Repeated": "Chiffres de tige répétés",
  "Trim": "Éliminer les valeurs aberrantes",
  "Depths": "Afficher les profondeurs",
  "NegativeLeaves": "Inverser les feuilles négatives",
  "help": {
    "title": "Diagramme en tiges et feuilles",
    "r_help": "help(stem.leaf, package='aplpack')",
    "body": "\n            <b>Description</b></br>\n            Affichage en tiges et feuilles et affichage en tiges et feuilles dos à dos\n            Crée un affichage classique (\"style Tukey\") en tiges et feuilles / affichage en tiges et feuilles dos à dos.\n            <br/>\n            <b>Utilisation</b>\n            <br/>\n            <code> \n            stem.leaf(data, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \"Sturges\"),\n                style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, depths = TRUE,\n                reverse.negative.leaves = TRUE, na.rm = FALSE, printresult = TRUE)<br/><br/>\n            stem.leaf.backback(x,y, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \n                \"Sturges\"), style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, \n                depths = TRUE, reverse.negative.leaves = TRUE, na.rm = FALSE,\n                printresult=TRUE, show.no.depths = FALSE, add.more.blanks = 0,\n                back.to.back = TRUE)\n            </code> <br/>\n            <b>Arguments</b><br/>\n            <ul>\n            <li>\n            data: un vecteur numérique de données\n            </li>\n            <li>\n            x: premier ensemble de données pour stem.leaf.backback\n            </li>\n            <li>\n            y: premier ensemble de données pour stem.leaf.backback\n            </li>\n            <li>\n            unit: unité de feuille, en puissance de 10 (par exemple, 100, .01); si l'unité est manquante, l'unité est choisie par stem.leaf.\n            </li>\n            <li>\n            m: nombre de parties (1, 2 ou 5) dans lesquelles chaque tige sera séparée; si m est manquant, le nombre de parties/tige (m) est choisi par stem.leaf.\n            </li>\n            <li>\n            Min: plus petite valeur non aberrante; omettre pour un choix automatique.\n            </li>\n            <li>\n            Max: plus grande valeur non aberrante; omettre pour un choix automatique.\n            </li>\n            <li>\n            rule.line: la règle à utiliser pour choisir le nombre de lignes souhaité dans l'affichage; \"Dixon\" = 10*log10(n); \"Velleman\" = 2*sqrt(n); \"Sturges\" = 1 + log2(n); la valeur par défaut est \"Dixon\".\n            </li>\n            <li>\n            style: \"Tukey\" (la valeur par défaut) pour les tiges divisées \"style Tukey\"; \"bare\" pour les tiges divisées qui répètent simplement les chiffres de tige.\n            </li>\n            <li>\n            trim.outliers: si TRUE (la valeur par défaut), les valeurs aberrantes sont placées sur les tiges LO et HI.\n            </li>\n            <li>\n            depths: si TRUE (la valeur par défaut), imprime une colonne de \"profondeurs\" à gauche des tiges; la profondeur de la tige contenant la médiane est le nombre de tiges entre parenthèses.\n            </li>\n            <li>\n            reverse.negative.leaves: si TRUE (la valeur par défaut), inverse la direction des feuilles sur les tiges négatives (donc, par exemple, la feuille 9 vient avant la feuille 8, etc.).\n            </li>\n            <li>\n            na.rm: si TRUE, les valeurs \"NA\" sont supprimées sinon le nombre de NAs est compté.\n            </li>\n            <li>\n            printresult: si TRUE, sortie de l'affichage en tiges et feuilles par cat.\n            </li>\n            <li>\n            show.no.depths: si TRUE, aucune profondeur n'est imprimée.\n            </li>\n            <li>\n            add.more.blanks: nombre de blancs ajoutés en plus des feuilles.\n            </li>\n            <li>\n            back.to.back: si FALSE, deux affichages en tiges et feuilles parallèles sont construits.\n            </li>\n            </ul>\n            <b>Détails</b></br>\n            Contrairement à la fonction stem dans le package de base, stem.leaf produit des affichages classiques en tiges et feuilles, comme décrit dans l'Analyse de données exploratoire de Tukey. La fonction stem.leaf.backback crée des affichages en tiges et feuilles dos à dos.\n            <br/>\n            <b>Valeur</b></br>\n            L'affichage en tiges et feuilles calculé est imprimé. Invisiblement, stem.leaf retourne l'affichage en tiges et feuilles sous forme de liste contenant les éléments info (légende), display (affichage en tiges et feuilles sous forme de vecteur de caractères), lower (valeurs très petites), upper (valeurs très grandes), depths (vecteur de profondeurs), stem (informations sur les tiges sous forme de vecteur), et leaves (vecteur de feuilles).</br>\n            <b>Exemples</b></br>\n            stem.leaf(co2)\n            stem.leaf.backback(co2[1:120],co2[121:240])</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE,\n                               add.more.blanks = 3, show.no.depths = TRUE)</br>\n            stem.leaf.backback(rivers[-(1:30)],rivers[1:30], back.to.back = FALSE, unit=10, m=5, \n                               Min=200, Max=900, add.more.blanks = 20, show.no.depths = TRUE)</br>\n            <b>Package</b></br>\n            aplpack</br>\n            <b>Aide</b></br>\n            help(stem.leaf, package=aplpack)</br>\n    "
  }
}