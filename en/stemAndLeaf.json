{
    "title": "Stem and Leaf Plot",
    "navigation": "Stem and Leaf",
    "Destination": "Select variable to plot",
    "label1": "Leafs digit",
    "label2": "Parts per stem",
    "label3": "Style of divided stems",
    "label4": "Options",
    "Value": "Enter a value",
    "Automatic": "Automatic",
    "EnterValue": "Specify value",
    "StemAutomatic": "Automatic",
    "SpecifyStemValue": "Specify value",
    "StemValue": "Enter a value",
    "Tukey": "Tukey",
    "Repeated": "Repeated stem digits",
    "Trim": "Trim outliers",
    "Depths": "Show depths",
    "NegativeLeaves": "Reverse negative leaves",
    "help": {
        "title": "Stem and Leaf Plot",
        "r_help": "help(stem.leaf, package='aplpack')",
        "body": "\n            <b>Description</b></br>\n            stem and leaf display and back to back stem and leaf display\n            Creates a classical (\"Tukey-style\") stem and leaf display / back-to-back stem and leaf display.\n            <br/>\n            <b>Usage</b>\n            <br/>\n            <code> \n            stem.leaf(data, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \"Sturges\"),\n                style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, depths = TRUE,\n                reverse.negative.leaves = TRUE, na.rm = FALSE, printresult = TRUE)<br/><br/>\n            stem.leaf.backback(x,y, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \n                \"Sturges\"), style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, \n                depths = TRUE, reverse.negative.leaves = TRUE, na.rm = FALSE,\n                printresult=TRUE, show.no.depths = FALSE, add.more.blanks = 0,\n                back.to.back = TRUE)\n            </code> <br/>\n            <b>Arguments</b><br/>\n            <ul>\n            <li>\n            data: a numeric vector of data\n            </li>\n            <li>\n            x: first dataset for stem.leaf.backback\n            </li>\n            <li>\n            y: first dataset for stem.leaf.backback\n            </li>\n            <li>\n            unit: leaf unit, as a power of 10 (e.g., 100, .01); if unit is missing unit is choosen by stem.leaf.\n            </li>\n            <li>\n            m: number of parts (1, 2, or 5) into which each stem will be separated; if m is missing the number of parts/stem (m) is choosen by stem.leaf.\n            </li>\n            <li>\n            Min: smallest non-outlying value; omit for automatic choice.\n            </li>\n            <li>\n            Max: largest non-outlying value; omit for automatic choice.\n            </li>\n            <li>\n            rule.line: the rule to use for choosing the desired number of lines in the display; \"Dixon\" = 10*log10(n); \"Velleman\" = 2*sqrt(n); \"Sturges\" = 1 + log2(n); the default is \"Dixon\".\n            </li>\n            <li>\n            style: \"Tukey\" (the default) for \"Tukey-style\" divided stems; \"bare\" for divided stems that simply repeat the stem digits.\n            </li>\n            <li>\n            trim.outliers: if TRUE (the default), outliers are placed on LO and HI stems.\n            </li>\n            <li>\n            depths: if TRUE (the default), print a column of \"depths\" to the left of the stems; the depth of the stem containing the median is the stem-count enclosed in parentheses.\n            </li>\n            <li>\n            reverse.negative.leaves: if TRUE (the default), reverse direction the leaves on negative stems (so, e.g., the leaf 9 comes before the leaf 8, etc.).\n            </li>\n            <li>\n            na.rm: if TRUE \"NA\" values are removed otherwise the number of NAs are counted.\n            </li>\n            <li>\n            printresult: if TRUE output of the stem and leaf display by cat.\n            </li>\n            <li>\n            show.no.depths: if TRUE no depths are printed.\n            </li>\n            <li>\n            add.more.blanks: number of blanks that are added besides the leaves.\n            </li>\n            <li>\n            back.to.back: if FALSE two parallel stem and leaf displays are constructed.\n            </li>\n            </ul>\n            <b>Details</b></br>\n            Unlike the stem function in the base package, stem.leaf produces classic stem-and-leaf displays, as described in Tukey's Exploratory Data Analysis. The function stem.leaf.backback creates back-to-back stem and leaf displays.\n            <br/>\n            <b>Value</b></br>\n            The computed stem and leaf display is printed out. Invisibly stem.leaf returns the stem and leaf display as a list containing the elements info (legend), display (stem and leaf display as character vecter), lower (very small values), upper (very large values), depths (vector of depths), stem (stem information as a vector), and leaves (vector of leaves).</br>\n            <b>Examples</b></br>\n            stem.leaf(co2)\n            stem.leaf.backback(co2[1:120],co2[121:240])</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE,\n                               add.more.blanks = 3, show.no.depths = TRUE)</br>\n            stem.leaf.backback(rivers[-(1:30)],rivers[1:30], back.to.back = FALSE, unit=10, m=5, \n                               Min=200, Max=900, add.more.blanks = 20, show.no.depths = TRUE)</br>\n            <b>Package</b></br>\n            aplpack</br>\n            <b>Help</b></br>\n            help(stem.leaf, package=aplpack)</br>\n    "
    }
}