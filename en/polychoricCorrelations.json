{
    "title": "Polychoric Correlation",
    "navigation": "Polychoric",
    "Target": "Select one or more x variables",
    "textbox1": "Confidence interval",
    "textbox2": "Null hypothesis (mu)",
    "Target2": "Select a single ordered factor variable y",
    "label1": "Type of estimation",
    "test1": "Two-step approximation",
    "test2": "Maximum-likelihood estimator",
    "label2": "Standard error",
    "Missvals": "Display standard error",
    "conflevel": "Maximum absolute correlation (to insure numerical stability).",
    "Seed": "Optional start value(s)",
    "header": "Correlation is estimated between each x variable and the y variable",
    "showEffectSizes": "Return estimated thresholds",
    "help": {
        "title": "Polychoric Correlation",
        "r_help": "help(polychor, package ='polycor')",
        "body": "\n<b>Description</b></br>\nComputes the polychoric correlation (and its standard error) between two ordinal variables, under the assumption that the ordinal variables dissect continuous latent variables that are bivariate normal. Either the maximum-likelihood estimator or a (possibly much) quicker “two-step” approximation is available. For the ML estimator, the estimates of the thresholds and the covariance matrix of the estimates are also available.\n<br/>\n<b>Usage</b>\n<br/>\n<code> \npolychor(x, y, ML = FALSE, control = list(), \n  std.err = FALSE, maxcor=.9999, start, thresholds=FALSE)\n</code> <br/>\n<b>Arguments</b><br/>\n<ul>\n<li>\nx: ordered categorical variable; the variable can be numeric, logical, a factor, an ordered factor, or a character variable, but if a factor, its levels should be in proper order, and the values of a character variable are ordered alphabetically.\n</li>\n<li>\ny: an ordered factor variable\n</li>\n<li>\nML: if TRUE, compute the maximum-likelihood estimate; if FALSE, the default, compute a quicker “two-step” approximation.\n</li>\n<li>\nstd.err: if TRUE, return the estimated variance of the correlation (for the two-step estimator) or the estimated covariance matrix (for the ML estimator) of the correlation and thresholds; the default is FALSE. \n</li>\n<li>\nmaxcor: maximum absolute correlation (to insure numerical stability).\n</li>\n<li>\nstart:  optional start value(s): if a single number, start value for the correlation.\n</li>\n<li>\nthresholds:  if TRUE (the default is FALSE) return estimated thresholds along with the estimated correlation even if standard errors aren't computed.\n</li>\n</ul>\n<b>Values</b></br>\nValue: If std.err or thresholds is TRUE, returns an object of class \"polycor\" with the following components:</br>\ntype: set to \"polychoric\".</br>\nrho: the polychoric correlation.</br>\nrow.cuts: estimated thresholds for the row variable (x), for the ML estimate.</br>\ncol.cuts: estimated thresholds for the column variable (y), for the ML estimate.</br>\nvar: the estimated variance of the correlation, or, for the ML estimate, the estimated covariance matrix of the correlation and thresholds.</br>\nn: the number of observations on which the correlation is based.</br>\nchisq: chi-square test for bivariate normality.</br>\ndf: degrees of freedom for the test of bivariate normality.</br>\nML: TRUE for the ML estimate, FALSE for the two-step estimate\n<b>Details</b></br>\nThe ML estimator is computed by maximizing the bivariate-normal likelihood with respect to the thresholds for the two variables (τ^x[i], i = 1,…, r - 1; τ^y[j], j = 1,…, c - 1) and the population correlation (ρ). Here, r and c are respectively the number of levels of x and y. The likelihood is maximized numerically using the optim function, and the covariance matrix of the estimated parameters is based on the numerical Hessian computed by optim.</br>\nThe two-step estimator is computed by first estimating the thresholds (τ^x[i], i = 1,…, r - 1 and τ^y[j], i = j,…, c - 1) separately from the marginal distribution of each variable. Then the one-dimensional likelihood for ρ is maximized numerically, using optim if standard errors are requested, or optimise if they are not. The standard error computed treats the thresholds as fixed.\n<br/>\n<b>Example</b></br>\n<code> \nif(require(mvtnorm)){\n    set.seed(12345)\n    data <- rmvnorm(1000, c(0, 0), matrix(c(1, .5, .5, 1), 2, 2))\n    x <- data[,1]\n    y <- data[,2]\n    cor(x, y)  # sample correlation\n    }\n\nif(require(mvtnorm)){\n    x <- cut(x, c(-Inf, .75, Inf))\n    y <- cut(y, c(-Inf, -1, .5, 1.5, Inf))\n    polychor(x, y)  # 2-step estimate\n    }\n\nif(require(mvtnorm)){\n    polychor(x, y, ML=TRUE, std.err=TRUE)  # ML estimate\n    }\n</code> <br/>\n<b>Package</b></br>\npolycor</br>\n<b>Help</b></br>\nFor detailed help click on the R icon on the top right hand side of this dialog overlay or run the following command help(polycor, package ='polychor') by creating a R code chunk by clicking + in the output window           \n    "
    }
}