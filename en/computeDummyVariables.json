{
    "title": "Compute Dummy Variable(s)",
    "navigation": "Dummy Code",
    "label1": "Enter variables to be dummy coded. New variables are created with the name in the format \"variable name_level name\".  By default the most frequent level is treated as reference",
    "target": "Select the variable(s) to be dummied",
    "label2": "Level to treat as reference",
    "MostFrequent": "Most frequent value",
    "first": "First value",
    "None": "Keep all levels (not recommended for statistical models) A.k.a one hot encoding",
    "prefix": "Prefix",
    "txt1": "Enter a prefix/suffix",
    "label3": "Other options",
    "chk3": "Remove original variables",
    "chk4": "Create dummy variables for missing values",
    "help": {
        "title": "Compute Dummy Variable(s)",
        "r_help": "help(dummy_cols, package =fastDummies)",
        "body": "\n<b>Description</b></br>\nCompute Dummy Variables\n<br/>\n<b>Usage</b>\n<br/>\n<code>\ndummy_cols(.data, select_columns = NULL, remove_first_dummy = FALSE,\n    remove_most_frequent_dummy = FALSE, ignore_na = FALSE,\n    split = NULL, remove_selected_columns = FALSE)\n</code> <br/>\n<b>Arguments</b><br/>\n<ul>\n<li>\n.data:\tAn object with the data set you want to make dummy columns from.\n</li>\n<li>\nselect_columns:\tVector of column names that you want to create dummy variables from. If NULL (default), uses all character and factor columns.\n</li>\n<li>\nremove_first_dummy: Removes the first dummy of every variable such that only n-1 dummies remain. This avoids multicollinearity issues in models.\n</li>\n<li>\nremove_most_frequent_dummy: Removes the most frequently observed category such that only n-1 dummies remain. If there is a tie for most frequent, will remove the first (by alphabetical order) category that is tied for most frequent.\n</li>\n<li>\nignore_na: If TRUE, ignores any NA values in the column. If FALSE (default), then it will make a dummy column for value_NA and give a 1 in any row which has a NA value.\n</li>\n<li>\nsplit: A string to split a column when multiple categories are in the cell. For example, if a variable is Pets and the rows are \"cat\", \"dog\", and \"turtle\", each of these pets would become its own dummy column. If one row is \"cat, dog\", then a split value of \",\" this row would have a value of 1 for both the cat and dog dummy columns.\n</li>\n<li>\nremove_selected_columns: If TRUE (not default), removes the columns used to generate the dummy columns.\n</li>\n<li>\nValue: A data.frame (or tibble or data.table, depending on input data type) with same number of rows as inputted data and original columns plus the newly created dummy columns.\n</li>\n<li>\nSee Also\ndummy_rows For creating dummy rows\n</li>\n<li>\nOther dummy functions: dummy_columns, dummy_rows\n</li>\n</ul>\n<b>Examples</b><br/>\n<code> \ncrime <- data.frame(city = c(\"SF\", \"SF\", \"NYC\"),\n    year = c(1990, 2000, 1990),\n    crime = 1:3)</br>\ndummy_cols(crime)</br>\n# Include year column\ndummy_cols(crime, select_columns = c(\"city\", \"year\"))</br>\n# Remove first dummy for each pair of dummy columns made</br>\ndummy_cols(crime, select_columns = c(\"city\", \"year\"),\n    remove_first_dummy = TRUE)</br>\n</code> <br/>\n<b>Package</b></br>\nfastDummies</br>\n<b>Help</b></br>\nhelp(dummy_cols, package =fastDummies)\n"
    }
}