{
  "title": "目标项目，多行格式",
  "navigation": "目标项目，多行格式",
  "src": "列",
  "idcolname": "交易 ID 变量名称",
  "itemcolname": "包含交易项目的变量",
  "prunerules": "修剪规则",
  "graphs": "显示可视化",
  "test3": "差异 < 0",
  "txtbox2": "零假设 (mu)",
  "txtbox1": "置信水平",
  "label1": "生成规则",
  "rulesobj": "规则对象名称",
  "rulesobjhint": "该对象保存所有规则，并可以在其他相关对话框中指定。即显示规则，绘制规则",
  "support": "最小支持值",
  "supphint": "项目的支持度是数据集中包含该项目的交易的比例。",
  "confidence": "最小置信度值",
  "confhint": "规则的置信度是对于包含规则左侧项目的新交易它为真的可能性",
  "label2": "目标项目",
  "label3": "输入您感兴趣的交易项目，例如，如果您想知道人们在购买牛奶之前购买了哪些项目，请在下面的文本框中输入牛奶作为右侧 (RHS)。由于所有其他项目可以出现在左侧，检查与默认出现在左侧相关的单选按钮。",
  "lhs": "出现在左侧的项目",
  "rhs": "出现在右侧的项目",
  "both": "出现在两侧的项目",
  "none": "根本不出现的项目",
  "label4": "默认外观",
  "rdboth": "两者",
  "rdlhs": "左侧",
  "rdrhs": "右侧",
  "rdnone": "无",
  "advoptions": "高级选项",
  "minlen": "左侧项目的最小数量",
  "maxlen": "左侧项目的最大数量",
  "sortopt": "排序选项",
  "sortby": "排序依据",
  "rd1": "置信度",
  "rd2": "提升",
  "rd3": "支持度",
  "sortord": "排序顺序",
  "increasing": "升序",
  "decreasing": "降序",
  "noofrules": "要显示的规则数量",
  "rulecount": "",
  "fromto": "显示规则",
  "from": "从",
  "to": "到",
  "help": {
    "title": "目标项目，多行格式",
    "r_help": "help(apriori, package='arules')",
    "body": "\n                    <b>\n                    注意：根据数据的格式，您将选择“购物篮数据格式”或“多行交易格式”或“多变量格式”。为每种数据格式提供了一组单独的对话框。请参见下面的详细信息：\n                    </b>\n                    <br/><br/>\n                    <b>\n                    购物篮数据格式\n                    </b>\n                    <br/>\n                    在购物篮数据格式中，单个购物篮中的所有项目都包含在数据集中的单列中。多个项目由任何单个字符分隔，如逗号（,）、分号（;）或冒号（:）等。\n                    <br/>\n                    <b>\n                    示例 1\n                    </b>\n                    <table style=\"border: 1px solid ; border-collapse: collapse;\">\n                    <tr>\n                    <th style=\"border: 1px solid ; border-collapse: collapse;\">项目</th>\n                    </tr>\n                    <tr>\n                    <td style=\"border: 1px solid ; border-collapse: collapse;\">item10,item20,item23,item24</td>\n                    </tr>\n                    <tr>\n                    <td style=\"border: 1px solid ; border-collapse: collapse;\">item12,item13,item43</td>\n                    </tr>\n                    <tr>\n                    <td style=\"border: 1px solid ; border-collapse: collapse;\">item12,item14,item32</td>\n                    </tr>            \n                </table> \n\n                <br/>\n                <b>\n                示例 2\n                </b>\n                <table style=\"border: 1px solid ; border-collapse: collapse;\">\n                <tr>\n                    <th style=\"border: 1px solid ; border-collapse: collapse;\">食品项目</th>\n                </tr>\n                <tr>\n                    <td style=\"border: 1px solid ; border-collapse: collapse;\">苹果，芒果，啤酒</td>\n                </tr>\n                <tr>\n                    <td style=\"border: 1px solid ; border-collapse: collapse;\">牛奶，鸡肉，奶酪</td>\n                </tr>\n                <tr>\n                    <td style=\"border: 1px solid ; border-collapse: collapse;\">苹果，葡萄酒，奶酪</td>\n                </tr>            \n                </table>    \n                <br/>\n                <br>\n                <b>\n                多行交易数据格式\n                </b>\n                <br/>\n                在交易格式中，单个购物篮中的每个项目都在单独的行中表示。所有表示单个购物篮中项目的行都包含一个共同的交易 ID。交易 ID 在单独的列中捕获        \n                <br/>\n                <b>\n                示例 1\n                </b>\n                <table style=\"border: 1px solid ; border-collapse: collapse;\">\n                <tr>\n                <th style=\"border: 1px solid ; border-collapse: collapse;\">ID</th>\n                <th style=\"border: 1px solid ; border-collapse: collapse;\">项目</th>\n                </tr>\n                <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">1</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">面包</td>\n                </tr>\n                <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">1</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">黄油</td>\n                </tr>\n                <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">肉类</td>\n                </tr>      \n                <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">鸡蛋</td>\n                </tr>\n                <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">奶酪</td>\n                </tr>\n                <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">2</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">牛奶</td>\n                </tr>                              \n            </table> \n            <br/>\n            所以购物篮 1 包含面包和黄油，购物篮 2 包含肉类、鸡蛋、奶酪和牛奶\n\n            <br/><br/>\n            <b>\n            多变量数据格式\n            </b>\n            <br/>\n            在此格式中，数据集中每个变量的每个级别表示一个项目。数据集的每一行表示一个购物篮。见下文\n            <br/>\n            <b>\n            示例 1\n            </b>\n            <table style=\"border: 1px solid ; border-collapse: collapse;\">\n            <tr>\n                <th style=\"border: 1px solid ; border-collapse: collapse;\">烘焙食品</th>\n                <th style=\"border: 1px solid ; border-collapse: collapse;\">乳制品 </th>\n                <th style=\"border: 1px solid ; border-collapse: collapse;\">肉类</th>\n                <th style=\"border: 1px solid ; border-collapse: collapse;\">蔬菜</th>        \n            </tr>\n            <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">面包</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">牛奶</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">鸡肉</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">西红柿</td>\n            </tr>\n            <tr>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">无</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">奶酪</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">无</td>\n                <td style=\"border: 1px solid ; border-collapse: collapse;\">洋葱</td>\n            </tr>\n            </table> \n            <br/>\n            修剪规则复选框允许您修剪规则。当选中时，显示冗余规则，并保存和显示已删除冗余规则的修剪模型。\n            <br/>\n            单击显示可视化复选框时，显示图形。我们已注释掉 #plot(rule1, method =\"paracoord\",control = list(reorder=TRUE))，因为它可能需要很长时间才能执行。您可以粘贴语法并手动运行命令。            \n            <br/>\n            <br/>\n            <b>目标项目</b>\n            <br/>\n            现在我们知道如何生成规则，通过删除冗余规则来限制输出，假设我们想要目标项目来生成规则。我们可能感兴趣的目标有两种类型，用“牛奶”的杂货店示例说明：\n            <br/><br/>\n            客户在购买牛奶之前可能会购买什么\n            <br/><br/>\n            客户在购买牛奶时可能会购买什么？\n            <br/><br/>\n            这基本上意味着我们想要设置左侧和右侧。 \n            <br/><br/>\n            如果您感兴趣的是人们在购买牛奶之前购买了哪些项目，请在下面的文本框中输入牛奶作为右侧 (RHS)。由于所有其他项目可以出现在左侧，检查与默认出现在左侧相关的单选按钮。\n            <br/><br/>\n            请记住，默认外观与所有未在左侧、右侧、出现在两侧或根本不出现的项目相关\n            <br/><br/>\n            如果您感兴趣的是客户在购买牛奶时可能会购买什么，请将牛奶放在左侧，并且由于任何项目都可以出现在右侧，请检查与默认出现在右侧相关的单选按钮\n            <br/>\n            <br/>\n            <b>\n            输出\n            </b>\n            <br/>\n            结果以表格格式显示\n            <br/>\n            表中的列如下\n            <br/><br/>\n            <b>LHS:</b> 这些代表购物篮中的项目\n            <br/><br/>\n            <b>RHS:</b> 给定购物篮中的项目 (LHS)，RHS 包含一个单一项目，该项目可能会被购买\n            <br/><br/>\n            <b>支持度:</b> 支持度是数据集中包含 LHS 项目的交易的比例\n            <br/><br/>\n            <b>置信度:</b> 置信度是购买 LHS 项目的客户也会购买 RHS 项目的条件概率\n            <br/><br/>\n            <b>提升:</b> 如果有人购买 LHS 项目，购买 RHS 项目的概率会增加多少。因此，基本上是我们对 RHS 被购买的置信度在 LHS 被购买的情况下增加了多少。如果提升 >1，则 LHS 项目的存在增加了 RHS 项目在交易中发生的概率，如果 <1，则 LHS 项目的存在会降低 RHS 项目的概率，如果 =1，则 LHS 和 RHS 是独立的\n            <br/><br/>\n            有关详细信息，请参见 \n            <br/><br/>\n            http://infocenter.informationbuilders.com/wf80/index.jsp?topic=%2Fpubdocs%2FRStat16%2Fsource%2Ftopic49.htm\n            <br/><br/>\n            https://discourse.snowplowanalytics.com/t/market-basket-analysis-identifying-products-and-content-that-go-well-together/1132\n            <br/><br/>\n            http://www.listendata.com/2015/12/market-basket-analysis-with-r.html\n            <br/><br/>\n            http://www.salemmarafi.com/code/market-basket-analysis-with-r/\n            <br/><br/>\n        \n            <b>包 : arules</b> \n            <br/><br/>\n            <b>描述</b> \n            <br/>\n            使用 Apriori 算法挖掘频繁项集、关联规则或关联超边。Apriori 算法采用逐层搜索频繁项集。所使用的 Apriori 实现包括一些改进（例如，前缀树和项目排序）。\n            <br/><br/>\n            <b>用法</b> \n            <br/>\n            <code>\n            apriori(data, parameter = NULL, appearance = NULL, control = NULL)\n            </code>\n            <br/><br/>\n        \n            <b>参数</b><br/>\n            <ul>\n            <li>\n            data: 事务类对象或任何可以强制转换为事务的数据结构（例如，二进制矩阵或数据框）。\n            </li>\n            <li>\n            parameter: APparameter 类对象或命名列表。默认行为是以 0.1 的最小支持度、0.8 的最小置信度、最多 10 个项目（maxlen）和 5 秒的最大子集检查时间（maxtime）挖掘规则。\n            </li>\n            <li>\n            appearance: APappearance 类对象或命名列表。使用此参数可以限制项目外观（实现规则模板）。默认情况下，所有项目都可以不受限制地出现。\n            </li>\n            <li>\n            control: APcontrol 类对象或命名列表。控制挖掘算法的算法性能（项目排序、报告进度（详细）、等）\n            </li>\n            </ul>\n            <br/><br/>\n            <b>详细信息</b><br/>\n            调用 Christian Borgelt 的 Apriori 算法的 C 实现，用于挖掘频繁项集、规则或超边。\n            <br/><br/>\n        \n            <b>注意</b>\n            Apriori 仅创建 RHS 中有一个项目的规则（结果）！APparameter 的默认值为 minlen 为 1。这意味着将创建只有一个项目的规则（即，空的前提/LHS），例如\n            <br/><br/>\n            <code>{} => {啤酒}</code>\n            <br/><br/>\n            将被创建。这些规则意味着无论涉及其他项目，RHS 中的项目将以规则的置信度（等于支持度）给出的概率出现。如果您想避免这些规则，则使用参数 list(minlen=2)。\n            <br/><br/>\n            <b>关于运行时间和内存使用的说明：</b>\n            如果为数据集选择的最小支持度过低，则算法将尝试创建一个极大的项集/规则集。这将导致非常长的运行时间，并最终导致进程耗尽内存。为防止这种情况，默认的项集/规则的最大长度限制为 10 个项目（通过参数元素 maxlen=10），并且检查子集的时间限制为 5 秒（通过 maxtime=5）。输出将显示您是否达到这些限制，在输出的“检查子集”行中。时间限制仅在子集大小增加时检查，因此它可能会比您在 maxtime 中指定的时间长得多。设置 maxtime=0 将禁用时间限制。\n            <br/>中断执行时使用 Control-C/Esc 不推荐。内存清理将被阻止，导致内存泄漏。此外，仅在子集大小增加时检查中断，因此可能需要一些时间才能实际停止执行。\n            <br/><br/>\n            <b>值</b><br/><br/>\n            返回规则或项集类对象。\n            <br/>              \n    "
  }
}