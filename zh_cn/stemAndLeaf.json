{
  "title": "茎叶图",
  "navigation": "茎叶图",
  "Destination": "选择要绘制的变量",
  "label1": "叶子数字",
  "label2": "每个茎的部分",
  "label3": "分开的茎的样式",
  "label4": "选项",
  "Value": "输入一个值",
  "Automatic": "自动",
  "EnterValue": "指定值",
  "StemAutomatic": "自动",
  "SpecifyStemValue": "指定值",
  "StemValue": "输入一个值",
  "Tukey": "图基",
  "Repeated": "重复的茎数字",
  "Trim": "修剪异常值",
  "Depths": "显示深度",
  "NegativeLeaves": "反转负叶子",
  "help": {
    "title": "茎叶图",
    "r_help": "help(stem.leaf, package='aplpack')",
    "body": "\n            <b>描述</b></br>\n            茎叶显示和背靠背的茎叶显示\n            创建经典的（\"图基风格\"）茎叶显示/背靠背茎叶显示。\n            <br/>\n            <b>用法</b>\n            <br/>\n            <code> \n            stem.leaf(data, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \"Sturges\"),\n                style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, depths = TRUE,\n                reverse.negative.leaves = TRUE, na.rm = FALSE, printresult = TRUE)<br/><br/>\n            stem.leaf.backback(x,y, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \n                \"Sturges\"), style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, \n                depths = TRUE, reverse.negative.leaves = TRUE, na.rm = FALSE,\n                printresult=TRUE, show.no.depths = FALSE, add.more.blanks = 0,\n                back.to.back = TRUE)\n            </code> <br/>\n            <b>参数</b><br/>\n            <ul>\n            <li>\n            data: 数值向量数据\n            </li>\n            <li>\n            x: 第一个数据集用于stem.leaf.backback\n            </li>\n            <li>\n            y: 第二个数据集用于stem.leaf.backback\n            </li>\n            <li>\n            unit: 叶子单位，作为10的幂（例如，100，.01）；如果缺少单位，则由stem.leaf选择单位。\n            </li>\n            <li>\n            m: 每个茎将被分成的部分数量（1、2或5）；如果缺少m，则由stem.leaf选择部分/茎的数量（m）。\n            </li>\n            <li>\n            Min: 最小的非异常值；省略以自动选择。\n            </li>\n            <li>\n            Max: 最大的非异常值；省略以自动选择。\n            </li>\n            <li>\n            rule.line: 用于选择显示中所需行数的规则；\"Dixon\" = 10*log10(n); \"Velleman\" = 2*sqrt(n); \"Sturges\" = 1 + log2(n); 默认是\"Dixon\"。\n            </li>\n            <li>\n            style: \"Tukey\"（默认）用于\"图基风格\"分开的茎；\"bare\"用于简单重复茎数字的分开茎。\n            </li>\n            <li>\n            trim.outliers: 如果为TRUE（默认），异常值被放置在LO和HI茎上。\n            </li>\n            <li>\n            depths: 如果为TRUE（默认），在茎的左侧打印一列\"深度\"；包含中位数的茎的深度是括号中的茎计数。\n            </li>\n            <li>\n            reverse.negative.leaves: 如果为TRUE（默认），反转负茎上的叶子的方向（例如，叶子9在叶子8之前，等等）。\n            </li>\n            <li>\n            na.rm: 如果为TRUE，则\"NA\"值被移除，否则计算NA的数量。\n            </li>\n            <li>\n            printresult: 如果为TRUE，茎叶显示的输出通过cat。\n            </li>\n            <li>\n            show.no.depths: 如果为TRUE，则不打印深度。\n            </li>\n            <li>\n            add.more.blanks: 除了叶子之外添加的空白数量。\n            </li>\n            <li>\n            back.to.back: 如果为FALSE，则构建两个平行的茎叶显示。\n            </li>\n            </ul>\n            <b>详细信息</b></br>\n            与基础包中的stem函数不同，stem.leaf生成经典的茎叶显示，如图基的探索性数据分析中所述。函数stem.leaf.backback创建背靠背的茎叶显示。\n            <br/>\n            <b>值</b></br>\n            计算出的茎叶显示被打印出来。隐式地，stem.leaf返回作为列表的茎叶显示，包含元素info（图例）、display（作为字符向量的茎叶显示）、lower（非常小的值）、upper（非常大的值）、depths（深度向量）、stem（作为向量的茎信息）和leaves（作为向量的叶子）。</br>\n            <b>示例</b></br>\n            stem.leaf(co2)\n            stem.leaf.backback(co2[1:120],co2[121:240])</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE,\n                               add.more.blanks = 3, show.no.depths = TRUE)</br>\n            stem.leaf.backback(rivers[-(1:30)],rivers[1:30], back.to.back = FALSE, unit=10, m=5, \n                               Min=200, Max=900, add.more.blanks = 20, show.no.depths = TRUE)</br>\n            <b>包</b></br>\n            aplpack</br>\n            <b>帮助</b></br>\n            help(stem.leaf, package=aplpack)</br>\n    "
  }
}