name: Translate New or Changed Files

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
    # change to main
      - action_dev

jobs:
  translate:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      # - run: git checkout HEAD^

      - name: Identify new or changed files
        id: file_changes
        run: |
          echo "##[group]Checking for new or changed files"
          NEW_FILES=$(git diff --name-status HEAD~1 HEAD | grep '^A' | awk '{print $2}')
          CHANGED_FILES=$(git diff --name-status HEAD~1 HEAD | grep '^M' | awk '{print $2}')
          echo "new_files=$NEW_FILES" >> $GITHUB_OUTPUT
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "##[endgroup]"
          echo $NEW_FILES
          echo $CHANGED_FILES

      - name: Set up Python
        if: steps.file_changes.outputs.new_files != '' || steps.file_changes.outputs.changed_files != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install aiohttp

      

      - name: Run translation script
        if: steps.file_changes.outputs.new_files != '' || steps.file_changes.outputs.changed_files != ''
        run: |
          cat > tmp.py << EOF
          # pip install aiohttp
          import argparse
          import sys
          import json
          import asyncio
          from datetime import datetime
          from collections import defaultdict
          from itertools import chain
          from pathlib import Path
          from traceback import format_exc
          from typing import Dict, List, Tuple
          from csv import DictWriter
          # import aiohttp
          import logging
          
          parser = argparse.ArgumentParser(
              prog='Translator',
              description='Translator for new/changed .json files',
              # epilog=''
          )
          parser.add_argument('--new_files', help='List of new files', default=None)
          parser.add_argument('--changed_files', help='List of changed files', default=None)
          parser.add_argument('--concurrent_tasks', help='Number of concurrent translation tasks', type=int, default=5)
          parser.add_argument('--max_langs_per_request', help='Maximum languages per one prediction request', type=int, default=2)
          
          parser.add_argument('--alita_project_id', help='Project id in alita', required=True, type=int)
          parser.add_argument('--token', help='Project id in alita', required=True, type=str)
          parser.add_argument('--lang_map', help='A folder-name mapping of languages', required=True)
          parser.add_argument('--llm_url', help='Llm prediction provider url', required=True, type=str)
          parser.add_argument('--prompt_version_id', help='Prediction prompt version id in alita', required=True, type=int)

          args = parser.parse_args()
          print(args)
          print(json.loads(args.lang_map))
          exit(123)
          EOF

          python tmp.py --new_files '${{ steps.file_changes.outputs.new_files }}' --changed_files '${{ steps.file_changes.outputs.changed_files }}' --alita_project_id '${{ vars.ALITA_PROJECT_ID }}' --token '${{ secrets.LLM_TOKEN }}' --llm_url '${{ vars.LLM_URL }}' --prompt_version_id '${{ vars.PROMPT_VERSION_ID }}' --lang_map '${{ vars.LANG_MAP }}'
          
          # echo "Processing NEW files"
          # python -c "import sys; print(f'python file: {sys.argv[1]}' if len(sys.argv) > 1 else 'No args')" ${{ steps.file_changes.outputs.new_files }}
          # echo "Processing CHANGED $FILE"
          # python -c "import sys; print(f'python file: {sys.argv[1]}' if len(sys.argv) > 1 else 'No args')" ${{ steps.file_changes.outputs.changed_files }}
          
      # - name: Configure Git
      #   run: |
      #    git config --global user.name 'github-actions[bot]'
      #    git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # - name: Commit changes
      #   run: |
      #    git checkout -b translation-updates
      #    git add .
      #    git commit -m "Add translations for new or changed files"

      # - name: Push changes
      #   env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #    git push --set-upstream origin translation-updates

      # - name: Create Pull Request
      #   id: create_pr
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #    commit-message: "Add translations for new or changed files"
      #    branch: translation-updates
      #    title: "Add translations for new or changed files"
      #    body: "This PR contains translations for the new or changed files."
      #    base: main
