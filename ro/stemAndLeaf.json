{
  "title": "Grafic Stem și Leaf",
  "navigation": "Stem și Leaf",
  "Destination": "Selectați variabila de graficat",
  "label1": "Digitul frunzelor",
  "label2": "Părți pe stem",
  "label3": "Stilul stembelor împărțite",
  "label4": "Opțiuni",
  "Value": "Introduceți o valoare",
  "Automatic": "Automat",
  "EnterValue": "Specificați valoarea",
  "StemAutomatic": "Automat",
  "SpecifyStemValue": "Specificați valoarea",
  "StemValue": "Introduceți o valoare",
  "Tukey": "Tukey",
  "Repeated": "Digituri de stem repetate",
  "Trim": "Tăiați valorile aberante",
  "Depths": "Arată adâncimile",
  "NegativeLeaves": "Inversează frunzele negative",
  "help": {
    "title": "Grafic Stem și Leaf",
    "r_help": "help(stem.leaf, package='aplpack')",
    "body": "\n            <b>Descriere</b></br>\n            afișare stem și leaf și afișare stem și leaf back-to-back\n            Creează o afișare clasică (\"stil Tukey\") stem și leaf / afișare stem și leaf back-to-back.\n            <br/>\n            <b>Utilizare</b>\n            <br/>\n            <code> \n            stem.leaf(data, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \"Sturges\"),\n                style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, depths = TRUE,\n                reverse.negative.leaves = TRUE, na.rm = FALSE, printresult = TRUE)<br/><br/>\n            stem.leaf.backback(x,y, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \n                \"Sturges\"), style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, \n                depths = TRUE, reverse.negative.leaves = TRUE, na.rm = FALSE,\n                printresult=TRUE, show.no.depths = FALSE, add.more.blanks = 0,\n                back.to.back = TRUE)\n            </code> <br/>\n            <b>Argumente</b><br/>\n            <ul>\n            <li>\n            data: un vector numeric de date\n            </li>\n            <li>\n            x: primul set de date pentru stem.leaf.backback\n            </li>\n            <li>\n            y: al doilea set de date pentru stem.leaf.backback\n            </li>\n            <li>\n            unit: unitatea frunzelor, ca o putere de 10 (de exemplu, 100, .01); dacă unitatea lipsește, unitatea este aleasă de stem.leaf.\n            </li>\n            <li>\n            m: numărul de părți (1, 2 sau 5) în care fiecare stem va fi împărțit; dacă m lipsește, numărul de părți/stem (m) este ales de stem.leaf.\n            </li>\n            <li>\n            Min: cea mai mică valoare non-aberrantă; omiteți pentru alegerea automată.\n            </li>\n            <li>\n            Max: cea mai mare valoare non-aberrantă; omiteți pentru alegerea automată.\n            </li>\n            <li>\n            rule.line: regula de utilizat pentru alegerea numărului dorit de linii în afișare; \"Dixon\" = 10*log10(n); \"Velleman\" = 2*sqrt(n); \"Sturges\" = 1 + log2(n); valoarea implicită este \"Dixon\".\n            </li>\n            <li>\n            style: \"Tukey\" (valoarea implicită) pentru stembi împărțite \"stil Tukey\"; \"bare\" pentru stembi împărțite care repetă pur și simplu digitul stem.\n            </li>\n            <li>\n            trim.outliers: dacă este TRUE (valoarea implicită), valorile aberante sunt plasate pe stembi LO și HI.\n            </li>\n            <li>\n            depths: dacă este TRUE (valoarea implicită), se imprimă o coloană de \"adâncimi\" la stânga stembelor; adâncimea stemului care conține mediana este numărul de stembi înconjurat în paranteze.\n            </li>\n            <li>\n            reverse.negative.leaves: dacă este TRUE (valoarea implicită), inversează direcția frunzelor pe stembi negative (deci, de exemplu, frunza 9 vine înaintea frunzei 8, etc.).\n            </li>\n            <li>\n            na.rm: dacă este TRUE, valorile \"NA\" sunt eliminate, altfel numărul de NAs este numărat.\n            </li>\n            <li>\n            printresult: dacă este TRUE, rezultatul afișării stem și leaf este afișat prin cat.\n            </li>\n            <li>\n            show.no.depths: dacă este TRUE, nu se imprimă adâncimi.\n            </li>\n            <li>\n            add.more.blanks: numărul de spații care sunt adăugate pe lângă frunze.\n            </li>\n            <li>\n            back.to.back: dacă este FALSE, se construiesc două afișări paralele stem și leaf.\n            </li>\n            </ul>\n            <b>Detalii</b></br>\n            Spre deosebire de funcția stem din pachetul de bază, stem.leaf produce afișări clasice stem și leaf, așa cum este descris în Analiza Exploratorie a Datelor a lui Tukey. Funcția stem.leaf.backback creează afișări stem și leaf back-to-back.\n            <br/>\n            <b>Valoare</b></br>\n            Afișarea calculată stem și leaf este imprimată. În mod invizibil, stem.leaf returnează afișarea stem și leaf ca o listă conținând elementele info (legendă), display (afișarea stem și leaf ca vector de caractere), lower (valori foarte mici), upper (valori foarte mari), depths (vector de adâncimi), stem (informații despre stem ca vector) și leaves (vector de frunze).</br>\n            <b>Exemple</b></br>\n            stem.leaf(co2)\n            stem.leaf.backback(co2[1:120],co2[121:240])</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE,\n                               add.more.blanks = 3, show.no.depths = TRUE)</br>\n            stem.leaf.backback(rivers[-(1:30)],rivers[1:30], back.to.back = FALSE, unit=10, m=5, \n                               Min=200, Max=900, add.more.blanks = 20, show.no.depths = TRUE)</br>\n            <b>Pachet</b></br>\n            aplpack</br>\n            <b>Ajutor</b></br>\n            help(stem.leaf, package=aplpack)</br>\n    "
  }
}