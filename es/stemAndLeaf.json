{
  "title": "Diagrama de tallo y hoja",
  "navigation": "Tallo y hoja",
  "Destination": "Seleccionar variable para graficar",
  "label1": "Dígito de hoja",
  "label2": "Partes por tallo",
  "label3": "Estilo de tallos divididos",
  "label4": "Opciones",
  "Value": "Ingrese un valor",
  "Automatic": "Automático",
  "EnterValue": "Especificar valor",
  "StemAutomatic": "Automático",
  "SpecifyStemValue": "Especificar valor",
  "StemValue": "Ingrese un valor",
  "Tukey": "Tukey",
  "Repeated": "Dígitos de tallo repetidos",
  "Trim": "Recortar valores atípicos",
  "Depths": "Mostrar profundidades",
  "NegativeLeaves": "Invertir hojas negativas",
  "help": {
    "title": "Diagrama de tallo y hoja",
    "r_help": "help(stem.leaf, package='aplpack')",
    "body": "\n            <b>Descripción</b></br>\n            visualización de tallo y hoja y visualización de tallo y hoja de espalda a espalda\n            Crea una visualización clásica de tallo y hoja (\"estilo Tukey\") / visualización de tallo y hoja de espalda a espalda.\n            <br/>\n            <b>Uso</b>\n            <br/>\n            <code> \n            stem.leaf(data, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \"Sturges\"),\n                style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, depths = TRUE,\n                reverse.negative.leaves = TRUE, na.rm = FALSE, printresult = TRUE)<br/><br/>\n            stem.leaf.backback(x,y, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \n                \"Sturges\"), style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, \n                depths = TRUE, reverse.negative.leaves = TRUE, na.rm = FALSE,\n                printresult=TRUE, show.no.depths = FALSE, add.more.blanks = 0,\n                back.to.back = TRUE)\n            </code> <br/>\n            <b>Argumentos</b><br/>\n            <ul>\n            <li>\n            data: un vector numérico de datos\n            </li>\n            <li>\n            x: primer conjunto de datos para stem.leaf.backback\n            </li>\n            <li>\n            y: segundo conjunto de datos para stem.leaf.backback\n            </li>\n            <li>\n            unit: unidad de hoja, como una potencia de 10 (por ejemplo, 100, .01); si falta la unidad, se elige por stem.leaf.\n            </li>\n            <li>\n            m: número de partes (1, 2 o 5) en las que se separará cada tallo; si falta m, se elige el número de partes/tallo (m) por stem.leaf.\n            </li>\n            <li>\n            Min: el valor no atípico más pequeño; omitir para elección automática.\n            </li>\n            <li>\n            Max: el valor no atípico más grande; omitir para elección automática.\n            </li>\n            <li>\n            rule.line: la regla a utilizar para elegir el número deseado de líneas en la visualización; \"Dixon\" = 10*log10(n); \"Velleman\" = 2*sqrt(n); \"Sturges\" = 1 + log2(n); el valor predeterminado es \"Dixon\".\n            </li>\n            <li>\n            style: \"Tukey\" (el predeterminado) para tallos divididos \"estilo Tukey\"; \"bare\" para tallos divididos que simplemente repiten los dígitos del tallo.\n            </li>\n            <li>\n            trim.outliers: si es TRUE (el predeterminado), los valores atípicos se colocan en los tallos LO y HI.\n            </li>\n            <li>\n            depths: si es TRUE (el predeterminado), imprime una columna de \"profundidades\" a la izquierda de los tallos; la profundidad del tallo que contiene la mediana es el conteo de tallos encerrado entre paréntesis.\n            </li>\n            <li>\n            reverse.negative.leaves: si es TRUE (el predeterminado), invierte la dirección de las hojas en tallos negativos (por lo que, por ejemplo, la hoja 9 viene antes que la hoja 8, etc.).\n            </li>\n            <li>\n            na.rm: si es TRUE, se eliminan los valores \"NA\"; de lo contrario, se cuentan el número de NAs.\n            </li>\n            <li>\n            printresult: si es TRUE, la salida de la visualización de tallo y hoja se muestra por cat.\n            </li>\n            <li>\n            show.no.depths: si es TRUE, no se imprimen profundidades.\n            </li>\n            <li>\n            add.more.blanks: número de espacios en blanco que se agregan además de las hojas.\n            </li>\n            <li>\n            back.to.back: si es FALSE, se construyen dos visualizaciones de tallo y hoja paralelas.\n            </li>\n            </ul>\n            <b>Detalles</b></br>\n            A diferencia de la función stem en el paquete base, stem.leaf produce visualizaciones clásicas de tallo y hoja, como se describe en el Análisis de Datos Exploratorios de Tukey. La función stem.leaf.backback crea visualizaciones de tallo y hoja de espalda a espalda.\n            <br/>\n            <b>Valor</b></br>\n            La visualización de tallo y hoja calculada se imprime. Invisiblemente, stem.leaf devuelve la visualización de tallo y hoja como una lista que contiene los elementos info (leyenda), display (visualización de tallo y hoja como vector de caracteres), lower (valores muy pequeños), upper (valores muy grandes), depths (vector de profundidades), stem (información del tallo como un vector) y leaves (vector de hojas).</br>\n            <b>Ejemplos</b></br>\n            stem.leaf(co2)\n            stem.leaf.backback(co2[1:120],co2[121:240])</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE,\n                               add.more.blanks = 3, show.no.depths = TRUE)</br>\n            stem.leaf.backback(rivers[-(1:30)],rivers[1:30], back.to.back = FALSE, unit=10, m=5, \n                               Min=200, Max=900, add.more.blanks = 20, show.no.depths = TRUE)</br>\n            <b>Paquete</b></br>\n            aplpack</br>\n            <b>Ayuda</b></br>\n            help(stem.leaf, package=aplpack)</br>\n    "
  }
}