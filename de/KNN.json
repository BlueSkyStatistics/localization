{
  "title": "K Nächste Nachbarn",
  "navigation": "KNN",
  "dependentvar": "Abhängige Variable",
  "independentvars": "Unabhängige Variable(n)",
  "header": "KNN ist ein fauler Klassifizierer, der kein Modell erstellt, um später Vorhersagen zu treffen. Es passt sich an und bewertet gleichzeitig. Wir teilen den Datensatz in Trainings- und Testdatensätze auf, bauen dann das Modell auf dem Trainingsdatensatz auf, machen Vorhersagen auf dem Testdatensatz und verwenden diese Vorhersagen, um Statistiken zur Modellevaluation anzuzeigen.",
  "Seed": "Seed festlegen",
  "Group2": "Tuning-Parameter für KNN",
  "noneighbhors": "Anzahl der Nachbarn (Wenn kein Wert angegeben ist, wird standardmäßig die Quadratwurzel der Anzahl der Beobachtungen im Datensatz verwendet)",
  "Group1": "Trainings- und Testdatensätze",
  "splitPercentage": "Geben Sie den Aufteilungsprozentsatz ein",
  "trainDatasetName": "Geben Sie den Namen des Trainingsdatensatzes ein",
  "testDatasetName": "Geben Sie den Namen des Testdatensatzes ein",
  "predictedValues": "Geben Sie das Variablenpräfix für die vorhergesagten Werte ein. (Sie müssen ein Präfix angeben) Präfixierte Variablen werden im Testdatensatz erstellt.",
  "help": {
    "title": "K Nächste Nachbarn",
    "r_help": "help(knn, package ='class')",
    "body": "\n                <b>Beschreibung</b></br>\nk-nächste Nachbarn Klassifikation\n<br/>\n<b>Hinweis: </b></br>\n1. Trainings- und Testdatensätze werden automatisch mit KNN basierend auf dem angegebenen Aufteilungsprozentsatz erstellt<br/>\n2. Die vorhergesagten Werte werden im Testdatensatz gespeichert und zur Berechnung von Modellstatistiken wie Genauigkeit, Kappa, Sensitivität... verwendet. Die Verwirrungsmatrix wird ebenfalls angezeigt\n<br/>\n<b>Verwendung</b>\n<br/>\n<code> \nknn(train, test, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)\n</code> <br/>\n<b>Argumente</b><br/>\n<ul>\n<li>\ntrain: Matrix oder Datenrahmen der Trainingsfallfälle.\n</li>\n<li>\ntest: Matrix oder Datenrahmen der Testfallfälle. Ein Vektor wird als Zeilenvektor für einen einzelnen Fall interpretiert.\n</li>\n<li>\ncl: Faktor der wahren Klassifikationen des Trainingssatzes\n</li>\n<li>\nk: Anzahl der berücksichtigten Nachbarn.\n</li>\n<li>\nl: Mindeststimme für eine endgültige Entscheidung, sonst Zweifel. (Genauer gesagt, weniger als k-l abweichende Stimmen sind erlaubt, selbst wenn k durch Unentschieden erhöht wird.)\n</li>\n<li>\nprob: Wenn dies wahr ist, wird der Anteil der Stimmen für die gewinnende Klasse als Attribut prob zurückgegeben.\n</li>\n<li>\nuse.all: steuert die Handhabung von Unentschieden. Wenn wahr, werden alle Abstände, die dem k-größten entsprechen, einbezogen. Wenn falsch, wird eine zufällige Auswahl von Abständen, die dem k-größten entsprechen, ausgewählt, um genau k Nachbarn zu verwenden.\n</li>\n</ul>\n<b>Wert</b></br>\nFaktor der Klassifikationen des Testdatensatzes. Zweifel wird als NA zurückgegeben.</br>\n<b>Paket</b></br>\ncaret;class</br>\n<b>Hilfe</b></br>\nhelp(knn, package ='class')\n                "
  }
}