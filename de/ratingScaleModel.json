{
  "title": "Bewertungsskalenmodell",
  "navigation": "Bewertungsskalenmodell",
  "modelname": "Modellnamen eingeben",
  "destinationvars": "Zielvariable(n)",
  "estimationlbl": "Schätzung",
  "rad1": "CML-Schätzung verwenden",
  "chk1": "Standardfehler berechnen",
  "chk2": "Parameter auf Summe (0) normalisieren",
  "rad2": "MML-Schätzung verwenden",
  "help": {
    "title": "Bewertungsskalenmodell",
    "r_help": "help(RSM, package='eRm')",
    "body": "\n            <b>Beschreibung</b>\n            <br/>\n            Generiert Parameterschätzungen für ein Bewertungsskalenmodell\n            <br/><br/>\n            Für die CML-Schätzung rufen wir eRm::RSM auf, um die Parameterschätzungen eines Bewertungsskalenmodells für polychotome Itemantworten zu berechnen \n            <br/><br/>\n            Für die MML-Schätzung rufen wir tam.mml mit den entsprechenden Parametern auf, siehe unten\n            <br/><br/>\n            <b>Verwendung für CML-Schätzung</b>\n            <br/>\n            <code>\n            eRm::RSM(X,se=FALSE,sum0=FALSE) \n            </code>  \n            <br/><br/>\n            <b>Argumente</b>\n            <br/>                      \n            <ul>\n            <li>\n            X:  Eingabematrix oder Datenrahmen mit 0/1-Daten; Zeilen repräsentieren Individuen, Spalten repräsentieren Items. Fehlende Werte werden als NA eingefügt.\n            </li>\n            <li>\n            W:  Entwurfsmatrix für das Rasch-Modell. Wenn weggelassen, wird die Funktion W automatisch berechnen.\n            </li>\n            <li>\n            se: Wenn TRUE, werden die Standardfehler berechnet.\n            </li>\n            <li>\n            sum0: Wenn TRUE, werden die Parameter auf Summe-0 normiert, indem eine geeignete W angegeben wird. Wenn FALSE, wird der erste Parameter auf 0 beschränkt.\n            </li>\n            <li>\n            etaStart: Ein Vektor von Startwerten für die eta-Parameter kann angegeben werden. Wenn nicht vorhanden, wird der 0-Vektor verwendet.\n            </li>\n            </ul>\n            <br/><br/><br/>\n            <b>Verwendung für MML-Schätzung</b>\n            <br/>\n            <code>\n            tam.mml(resp,irtmodel=\"RSM\",verbose=FALSE )\n            </code>\n            <br/><br/>\n            <b>Argumente</b>\n            <br/>             \n            <ul>\n            <li>\n            resp: Datenrahmen mit polytomen Itemantworten k=0,...,K. Fehlende Antworten müssen als NA deklariert werden.\n            </li>\n            <li>\n            irtmodel: Für feste Itemneigungen (in tam.mml) umfassen die Optionen PCM (partielles Kreditmodell), PCM2 (partielles Kreditmodell mit ConQuest-Parametrisierung 'item+item*step' und RSM (Bewertungsskalenmodell; die ConQuest-Parametrisierung 'item+step'). \n            <br/>\n            Für geschätzte Itemneigungen (nur verfügbar in tam.mml.2pl) sind die Optionen 2PL (alle Neigungen der Itemkategorien werden geschätzt; Nominal Item Response Model), GPCM (generalisiertes partielles Kreditmodell, bei dem jedes Item einen und nur einen Neigungsparameter pro Dimension erhält) und 2PL.groups (Teilmenge von Items erhält dieselben Schätzungen der Itemneigung) sowie eine Entwurfsmatrix E für die Itemneigungen im generalisierten partiellen Kreditmodell (GPCM.design, siehe Beispiele). Beachten Sie, dass Itemneigungen nicht mit facettierten Designs unter Verwendung der Funktion tam.mml.mfr geschätzt werden können. Es ist jedoch einfach, vordefinierte Entwurfsmatrizen zu verwenden und einige Einschränkungen auf tam.mml.2pl anzuwenden.\n            </li>\n            <li>\n            verbose: Logisch, das angibt, ob die Ausgabe während der Iterationen gedruckt werden soll. \n            </li>\n            </ul>\n            <br/><br/>\n            <b>Pakete</b>\n            <br/>\n            TAM, eRm\n            <br/><br/>\n            <b>Hilfe</b>\n            <br/>\n            help(RSM, package='eRm')\n            <br/>\n            help(tam.mml, package='TAM')\n"
  }
}