{
  "title": "Convertiți în factor(i)",
  "navigation": "Către factor",
  "trg": "Variabilele care trebuie convertite în factor",
  "help": {
    "title": "Convertiți în factor(i)",
    "r_help": "help(factor, package=base)",
    "body": "\n<b>Descriere</b></br>\nFuncția factor este utilizată pentru a codifica un vector ca factor (termenii „categorie” și „tip enumerat” sunt de asemenea utilizați pentru factori). Dacă argumentul ordered este TRUE, nivelurile factorului sunt considerate ordonate. Pentru compatibilitate cu S există de asemenea o funcție ordered.\nis.factor, is.ordered, as.factor și as.ordered sunt funcțiile de apartenență și coercie pentru aceste clase.\n<br/>\n<b>Utilizare</b>\n<br/>\n<code>\nfactor(x = character(), levels, labels = levels,\n        exclude = NA, ordered = is.ordered(x), nmax = NA)\nordered(x, ...)\nis.factor(x)\nis.ordered(x)\nas.factor(x)\nas.ordered(x)\naddNA(x, ifany = FALSE)\n</code> <br/>\n<b>Argumente</b><br/>\n<ul>\n<li>\nx: un vector de date, de obicei având un număr mic de valori distincte.\n</li>\n<li>\nlevels:\tun vector opțional de valori (ca șiruri de caractere) pe care x ar fi putut să le aibă. Implicit este setul unic de valori luate de as.character(x), sortat în ordine crescătoare a lui x. Rețineți că acest set poate fi specificat ca fiind mai mic decât sort(unique(x)).\n</li>\n<li>\nlabels:\tun vector opțional de etichete pentru niveluri (în aceeași ordine ca nivelurile după eliminarea celor din exclude), sau un șir de caractere de lungime 1.\n</li>\n<li>\nexclude: Un vector de valori care trebuie excluse atunci când se formează setul de niveluri. Acesta ar trebui să fie de același tip ca x și va fi coercit dacă este necesar.\n</li>\n<li>\nordered: un indicator logic pentru a determina dacă nivelurile ar trebui considerate ordonate (în ordinea dată).\n</li>\n<li>\nnmax: o limită superioară asupra numărului de niveluri; vezi „Detalii”.\n</li>\n<li>\n...(în ordered(.)): oricare dintre cele de mai sus, în afară de ordered însăși.\n</li>\n<li>\nifany: (doar adăugați un nivel NA dacă este utilizat, adică dacă any(is.na(x)).\n</li>\n</ul>\n<b>Detalii</b></br>\nTipul vectorului x nu este restricționat; trebuie doar să aibă o metodă as.character și să fie sortabil (prin sort.list).<br/>\nFactorii ordonați diferă de factorii obișnuiți doar în clasa lor, dar metodele și funcțiile de ajustare a modelului tratează cele două clase foarte diferit.<br/>\nCodificarea vectorului se face astfel. Mai întâi, toate valorile din exclude sunt eliminate din niveluri. Dacă x[i] este egal cu levels[j], atunci elementul i din rezultat este j. Dacă nu se găsește o potrivire pentru x[i] în niveluri (ceea ce se va întâmpla pentru valorile excluse), atunci elementul i din rezultat este setat la NA.<br/>\nÎn mod normal, „nivelurile” utilizate ca atribut al rezultatului sunt setul redus de niveluri după eliminarea celor din exclude, dar acest lucru poate fi modificat prin furnizarea de etichete. Acestea ar trebui să fie fie un set de etichete noi pentru niveluri, fie un șir de caractere, caz în care nivelurile sunt acel șir de caractere cu un număr de secvență adăugat.<br/>\nfactor(x, exclude = NULL) aplicat unui factor este o operație fără efect, cu excepția cazului în care există niveluri neutilizate: în acel caz, se returnează un factor cu setul de niveluri redus. Dacă exclude este utilizat, ar trebui să fie de asemenea un factor cu același set de niveluri ca x sau un set de coduri pentru nivelurile care trebuie excluse.<br/>\nCodurile unui factor pot conține NA. Pentru un x numeric, setați exclude = NULL pentru a face NA un nivel suplimentar (se afișează ca <NA>); implicit, acesta este ultimul nivel.<br/>\nDacă NA este un nivel, modul de a seta un cod ca fiind lipsă (spre deosebire de codul nivelului lipsă) este să folosiți is.na pe partea stângă a unei atribuiri (ca în is.na(f)[i] <- TRUE; indexarea în interiorul is.na nu funcționează). În aceste circumstanțe, valorile lipsă sunt în prezent afișate ca <NA>, adică identice cu intrările nivelului NA.<br/>\nis.factor este generic: puteți scrie metode pentru a gestiona clase specifice de obiecte, vezi InternalMethods.<br/>\nAtunci când levels nu este furnizat, se apelează unique. Deoarece factorii au de obicei un număr destul de mic de niveluri, pentru vectori mari x este util să se furnizeze nmax ca limită superioară asupra numărului de valori unice.<br/>\n<b>Valoare</b><br/>\nfactor returnează un obiect de clasă \"factor\" care are un set de coduri întregi de lungime x cu un atribut \"niveluri\" de mod caracter și intrări unice (!anyDuplicated(.)). Dacă argumentul ordered este adevărat (sau ordered() este utilizat), rezultatul are clasa c(\"ordered\", \"factor\").<br/>\nAplicarea factor la un factor ordonat sau neordonat returnează un factor (de același tip) cu doar nivelurile care apar: vezi de asemenea [.factor pentru o modalitate mai transparentă de a realiza acest lucru.\nis.factor returnează TRUE sau FALSE în funcție de faptul dacă argumentul său este de tip factor sau nu. În mod corespunzător, is.ordered returnează TRUE atunci când argumentul său este un factor ordonat și FALSE în caz contrar.<br/>\nas.factor coerțează argumentul său într-un factor. Este o formă abreviată a factor.<br/>\nas.ordered(x) returnează x dacă acesta este ordonat și ordered(x) în caz contrar.<br/>\naddNA modifică un factor transformând NA într-un nivel suplimentar (astfel încât valorile NA să fie numărate în tabele, de exemplu).<br/>\n<b>Pachet</b></br>\nbase</br>\n<b>Ajutor</b></br>\nhelp(factor, package =fastDummies)\n"
  }
}