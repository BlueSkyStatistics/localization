{
  "title": "Gráfico de Stem e Leaf",
  "navigation": "Stem e Leaf",
  "Destination": "Selecione a variável para plotar",
  "label1": "Dígito das folhas",
  "label2": "Partes por stem",
  "label3": "Estilo de stems divididos",
  "label4": "Opções",
  "Value": "Digite um valor",
  "Automatic": "Automático",
  "EnterValue": "Especifique o valor",
  "StemAutomatic": "Automático",
  "SpecifyStemValue": "Especifique o valor",
  "StemValue": "Digite um valor",
  "Tukey": "Tukey",
  "Repeated": "Dígitos de stem repetidos",
  "Trim": "Remover outliers",
  "Depths": "Mostrar profundidades",
  "NegativeLeaves": "Reverter folhas negativas",
  "help": {
    "title": "Gráfico de Stem e Leaf",
    "r_help": "help(stem.leaf, package='aplpack')",
    "body": "\n            <b>Descrição</b></br>\n            exibição de stem e leaf e exibição de stem e leaf de costas para costas\n            Cria uma exibição clássica (\"estilo Tukey\") de stem e leaf / exibição de stem e leaf de costas para costas.\n            <br/>\n            <b>Uso</b>\n            <br/>\n            <code> \n            stem.leaf(data, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \"Sturges\"),\n                style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, depths = TRUE,\n                reverse.negative.leaves = TRUE, na.rm = FALSE, printresult = TRUE)<br/><br/>\n            stem.leaf.backback(x,y, unit, m, Min, Max, rule.line = c(\"Dixon\", \"Velleman\", \n                \"Sturges\"), style = c(\"Tukey\", \"bare\"), trim.outliers = TRUE, \n                depths = TRUE, reverse.negative.leaves = TRUE, na.rm = FALSE,\n                printresult=TRUE, show.no.depths = FALSE, add.more.blanks = 0,\n                back.to.back = TRUE)\n            </code> <br/>\n            <b>Argumentos</b><br/>\n            <ul>\n            <li>\n            data: um vetor numérico de dados\n            </li>\n            <li>\n            x: primeiro conjunto de dados para stem.leaf.backback\n            </li>\n            <li>\n            y: primeiro conjunto de dados para stem.leaf.backback\n            </li>\n            <li>\n            unit: unidade da folha, como uma potência de 10 (por exemplo, 100, .01); se a unidade estiver ausente, a unidade é escolhida por stem.leaf.\n            </li>\n            <li>\n            m: número de partes (1, 2 ou 5) nas quais cada stem será separado; se m estiver ausente, o número de partes/stem (m) é escolhido por stem.leaf.\n            </li>\n            <li>\n            Min: menor valor não outlier; omita para escolha automática.\n            </li>\n            <li>\n            Max: maior valor não outlier; omita para escolha automática.\n            </li>\n            <li>\n            rule.line: a regra a ser usada para escolher o número desejado de linhas na exibição; \"Dixon\" = 10*log10(n); \"Velleman\" = 2*sqrt(n); \"Sturges\" = 1 + log2(n); o padrão é \"Dixon\".\n            </li>\n            <li>\n            style: \"Tukey\" (o padrão) para \"estilo Tukey\" de stems divididos; \"bare\" para stems divididos que simplesmente repetem os dígitos do stem.\n            </li>\n            <li>\n            trim.outliers: se TRUE (o padrão), outliers são colocados nos stems LO e HI.\n            </li>\n            <li>\n            depths: se TRUE (o padrão), imprime uma coluna de \"profundidades\" à esquerda dos stems; a profundidade do stem que contém a mediana é a contagem de stems entre parênteses.\n            </li>\n            <li>\n            reverse.negative.leaves: se TRUE (o padrão), reverte a direção das folhas em stems negativos (então, por exemplo, a folha 9 vem antes da folha 8, etc.).\n            </li>\n            <li>\n            na.rm: se TRUE, os valores \"NA\" são removidos, caso contrário, o número de NAs é contado.\n            </li>\n            <li>\n            printresult: se TRUE, a saída da exibição de stem e leaf é feita por cat.\n            </li>\n            <li>\n            show.no.depths: se TRUE, nenhuma profundidade é impressa.\n            </li>\n            <li>\n            add.more.blanks: número de espaços em branco que são adicionados além das folhas.\n            </li>\n            <li>\n            back.to.back: se FALSE, duas exibições paralelas de stem e leaf são construídas.\n            </li>\n            </ul>\n            <b>Detalhes</b></br>\n            Ao contrário da função stem no pacote base, stem.leaf produz exibições clássicas de stem e leaf, conforme descrito na Análise de Dados Exploratória de Tukey. A função stem.leaf.backback cria exibições de stem e leaf de costas para costas.\n            <br/>\n            <b>Valor</b></br>\n            A exibição de stem e leaf calculada é impressa. Invisivelmente, stem.leaf retorna a exibição de stem e leaf como uma lista contendo os elementos info (legenda), display (exibição de stem e leaf como vetor de caracteres), lower (valores muito pequenos), upper (valores muito grandes), depths (vetor de profundidades), stem (informações do stem como um vetor) e leaves (vetor de folhas).</br>\n            <b>Exemplos</b></br>\n            stem.leaf(co2)\n            stem.leaf.backback(co2[1:120],co2[121:240])</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE)</br>\n            stem.leaf.backback(co2[1:120],co2[121:240], back.to.back = FALSE,\n                               add.more.blanks = 3, show.no.depths = TRUE)</br>\n            stem.leaf.backback(rivers[-(1:30)],rivers[1:30], back.to.back = FALSE, unit=10, m=5, \n                               Min=200, Max=900, add.more.blanks = 20, show.no.depths = TRUE)</br>\n            <b>Pacote</b></br>\n            aplpack</br>\n            <b>Ajuda</b></br>\n            help(stem.leaf, package=aplpack)</br>\n    "
  }
}