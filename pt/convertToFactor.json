{
  "title": "Converter para Fator(es)",
  "navigation": "Para Fator",
  "trg": "Variáveis a serem convertidas em fator",
  "help": {
    "title": "Converter para Fator(es)",
    "r_help": "help(factor, package=base)",
    "body": "\n<b>Descrição</b></br>\nA função factor é usada para codificar um vetor como um fator (os termos ‘categoria’ e ‘tipo enumerado’ também são usados para fatores). Se o argumento ordered for TRUE, os níveis do fator são considerados ordenados. Para compatibilidade com S, também existe uma função ordered.\nis.factor, is.ordered, as.factor e as.ordered são as funções de associação e coerção para essas classes.\n<br/>\n<b>Uso</b>\n<br/>\n<code>\nfactor(x = character(), levels, labels = levels,\n        exclude = NA, ordered = is.ordered(x), nmax = NA)\nordered(x, ...)\nis.factor(x)\nis.ordered(x)\nas.factor(x)\nas.ordered(x)\naddNA(x, ifany = FALSE)\n</code> <br/>\n<b>Argumentos</b><br/>\n<ul>\n<li>\nx: um vetor de dados, geralmente com um pequeno número de valores distintos.\n</li>\n<li>\nlevels:\tvetor opcional dos valores (como strings de caracteres) que x pode ter. O padrão é o conjunto único de valores obtidos por as.character(x), ordenados em ordem crescente de x. Note que este conjunto pode ser especificado como menor que sort(unique(x)).\n</li>\n<li>\nlabels:\tvetor opcional de caracteres para os rótulos dos níveis (na mesma ordem que levels após remover os que estão em exclude), ou uma string de caracteres de comprimento 1.\n</li>\n<li>\nexclude: Um vetor de valores a serem excluídos ao formar o conjunto de níveis. Isso deve ser do mesmo tipo que x e será coercido se necessário.\n</li>\n<li>\nordered: flag lógica para determinar se os níveis devem ser considerados ordenados (na ordem dada).\n</li>\n<li>\nnmax: um limite superior no número de níveis; veja ‘Detalhes’.\n</li>\n<li>\n...(em ordered(.)): qualquer um dos acima, exceto ordered em si.\n</li>\n<li>\nifany: (apenas adicione um nível NA se ele for usado, ou seja, se any(is.na(x)).\n</li>\n</ul>\n<b>Detalhes</b></br>\nO tipo do vetor x não é restrito; ele deve apenas ter um método as.character e ser ordenável (por sort.list).<br/>\nFatores ordenados diferem de fatores apenas em sua classe, mas métodos e as funções de ajuste de modelo tratam as duas classes de maneira bastante diferente.<br/>\nA codificação do vetor acontece da seguinte forma. Primeiro, todos os valores em exclude são removidos de levels. Se x[i] for igual a levels[j], então o i-ésimo elemento do resultado é j. Se nenhuma correspondência for encontrada para x[i] em levels (o que acontecerá para valores excluídos), então o i-ésimo elemento do resultado é definido como NA.<br/>\nNormalmente, os ‘níveis’ usados como um atributo do resultado são o conjunto reduzido de níveis após remover aqueles em exclude, mas isso pode ser alterado fornecendo rótulos. Isso deve ser um conjunto de novos rótulos para os níveis, ou uma string de caracteres, caso em que os níveis são essa string de caracteres com um número de sequência anexado.<br/>\nfactor(x, exclude = NULL) aplicado a um fator é uma operação sem efeito, a menos que haja níveis não utilizados: nesse caso, um fator com o conjunto de níveis reduzido é retornado. Se exclude for usado, ele também deve ser um fator com o mesmo conjunto de níveis que x ou um conjunto de códigos para os níveis a serem excluídos.<br/>\nOs códigos de um fator podem conter NA. Para um x numérico, defina exclude = NULL para fazer NA um nível extra (imprime como <NA>); por padrão, este é o último nível.<br/>\nSe NA for um nível, a maneira de definir um código como ausente (em oposição ao código do nível ausente) é usar is.na no lado esquerdo de uma atribuição (como em is.na(f)[i] <- TRUE; indexação dentro de is.na não funciona). Nessas circunstâncias, os valores ausentes são atualmente impressos como <NA>, ou seja, idênticos às entradas do nível NA.<br/>\nis.factor é genérico: você pode escrever métodos para lidar com classes específicas de objetos, veja InternalMethods.<br/>\nOnde levels não é fornecido, unique é chamado. Como fatores normalmente têm um número bastante pequeno de níveis, para vetores grandes x, é útil fornecer nmax como um limite superior no número de valores únicos.<br/>\n<b>Valor</b><br/>\nfactor retorna um objeto da classe \"factor\" que tem um conjunto de códigos inteiros do comprimento de x com um atributo \"levels\" de modo caractere e entradas únicas (!anyDuplicated(.)). Se o argumento ordered for verdadeiro (ou ordered() for usado), o resultado tem a classe c(\"ordered\", \"factor\").<br/>\nAplicar factor a um fator ordenado ou não ordenado retorna um fator (do mesmo tipo) com apenas os níveis que ocorrem: veja também [.factor para uma maneira mais transparente de alcançar isso.\nis.factor retorna TRUE ou FALSE dependendo se seu argumento é do tipo fator ou não. Correspondentemente, is.ordered retorna TRUE quando seu argumento é um fator ordenado e FALSE caso contrário.<br/>\nas.factor coerces seu argumento para um fator. É uma forma abreviada de factor.<br/>\nas.ordered(x) retorna x se este for ordenado, e ordered(x) caso contrário.<br/>\naddNA modifica um fator transformando NA em um nível extra (para que os valores NA sejam contados em tabelas, por exemplo).<br/>\n<b>Pacote</b></br>\nbase</br>\n<b>Ajuda</b></br>\nhelp(factor, package =fastDummies)\n"
  }
}