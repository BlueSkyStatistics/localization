{
  "title": "Exemplo de Distribuição Gamma",
  "navigation": "Exemplo de Distribuição Gamma",
  "entrdsname": "Digite o nome do conjunto de dados",
  "shape": "Forma",
  "scale": "Escala (taxa inversa)",
  "lblnoofsamples": "Número de amostras (linhas)",
  "lblnoofobsv": "Número de observações (colunas)",
  "lblseed": "Semente",
  "lblAddtoDS": "Adicionar ao conjunto de dados",
  "chklbl1": "Médias das amostras",
  "chklbl2": "Somas das amostras",
  "chklbl3": "Desvios padrão das amostras",
  "help": {
    "title": "Exemplo de Distribuição Gamma",
    "r_help": "help(rgamma, package=stats)",
    "body": "\n            ​​\n            <b>Descrição</b>\n            <br/>\n            Densidade, função de distribuição, função quantílica e geração aleatória para a distribuição Gamma com parâmetros de forma e escala.\n            <br/>\n            <b>Uso</b>\n            <br/>\n            <code>\n                dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)\n                <br/>\n                pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                rgamma(n, shape, rate = 1, scale = 1/rate)\n                <br/>\n            </code>\n            <br/>\n            <b>Argumentos</b>\n            <br/>\n            <ul>\n                <li></li>\n                <li>x, q : vetor de quantis.</li>\n                \n                \n                <li>p : vetor de probabilidades.</li>\n                \n                \n                <li>n : número de observações. Se length(n) > 1, o comprimento é considerado como o número necessário.</li>\n                \n                \n                <li>rate : uma maneira alternativa de especificar a escala.</li>\n                \n                \n                <li>shape, scale : parâmetros de forma e escala. Devem ser positivos, escala estritamente.</li>\n                \n                \n                <li>log, log.p : lógico; se TRUE, probabilidades/densidades p são retornadas como log(p).</li>\n                \n                \n                <li>lower.tail : lógico; se TRUE (padrão), as probabilidades são P[X ≤ x], caso contrário, P[X > x].</li>\n            </ul>\n            \n            \n            \n            <br/>\n            Detalhes\n            <br/>\n            Se a escala for omitida, assume-se o valor padrão de 1.\n            <br/>\n            A distribuição Gamma com parâmetros shape = a e scale = s tem densidade\n            <br/>\n            <code>f(x)= 1/(s^a Gamma(a)) x^(a-1) e^-(x/s)</code>\n            <br/>\n            para x ≥ 0, a > 0 e s > 0. (Aqui Gamma(a) é a função implementada pela gamma() do R e definida em sua ajuda. Note que a = 0 corresponde à distribuição trivial com toda a massa no ponto 0.)\n            <br/>\n            A média e a variância são <code>E(X) = a*s e Var(X) = a*s^2.</code>\n            <br/>\n            O risco cumulativo <code>H(t) = - log(1 - F(t))</code> é\n            <br/>\n            -pgamma(t, ..., lower = FALSE, log = TRUE)\n            <br/>\n            Note que para valores pequenos de shape (e escala moderada) uma grande parte da massa da distribuição Gamma está em valores de x tão próximos de zero que serão representados como zero na aritmética computacional. Portanto, rgamma pode retornar valores que serão representados como zero. (Isso também acontecerá para valores muito grandes de escala, uma vez que a geração real é feita para scale = 1.)\n            <br/>\n            <br/><b>Valor</b>\n            <br/>\n            dgamma fornece a densidade, pgamma fornece a função de distribuição, qgamma fornece a função quantílica, e rgamma gera desvios aleatórios.\n            <br/>\n            Argumentos inválidos resultarão em valor de retorno NaN, com um aviso.\n            <br/>\n            O comprimento do resultado é determinado por n para rgamma, e é o máximo dos comprimentos dos argumentos numéricos para as outras funções.\n            <br/>\n            Os argumentos numéricos além de n são reciclados para o comprimento do resultado. Apenas os primeiros elementos dos argumentos lógicos são usados.\n            <br/>\n            <br/><b>Nota</b>\n            <br/>\n            A parametrização S (Becker et al, 1988) foi via shape e rate: S não tinha parâmetro de escala. É um erro fornecer uma escala e uma taxa.\n            <br/>\n            pgamma está intimamente relacionado à função gamma incompleta. Como definido por Abramowitz e Stegun 6.5.1 (e por 'Receitas Numéricas') isso é\n            <br/>\n            <code>P(a,x) = 1/Gamma(a) integral_0^x t^(a-1) exp(-t) dt</code>\n            <br/>\n            P(a, x) é pgamma(x, a). Outros autores (por exemplo, Karl Pearson em suas tabelas de 1922) omitem o fator de normalização, definindo a função gamma incompleta γ(a,x) como gamma(a,x) = integral_0^x t^(a-1) exp(-t) dt, ou seja, pgamma(x, a) * gamma(a). Outros ainda usam a função gamma incompleta 'superior',\n            <br/>\n            <code>Gamma(a,x) = integral_x^Inf t^(a-1) exp(-t) dt,</code>\n            <br/>\n            que pode ser computada por pgamma(x, a, lower = FALSE) * gamma(a).\n            <br/>\n            Note, no entanto, que pgamma(x, a, ..) atualmente requer a > 0, enquanto a função gamma incompleta também é definida para a < 0. Nesse caso, você pode usar gamma_inc(a,x) (para Γ(a,x)) do pacote gsl.\n            <br/>\n            Veja também https://en.wikipedia.org/wiki/Incomplete_gamma_function, ou http://dlmf.nist.gov/8.2#i.            \n        "
  }
}