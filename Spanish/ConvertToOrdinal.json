{
  "title": "Convertir a Factor(es) Ordenado(s)/Ordinal",
  "navigation": "A Factor/Ordinal Ordenado",
  "trg": "Variables a convertir a factor/ordinal ordenado",
  "help": {
    "title": "Convertir a Factor(es) Ordenado(s)/Ordinal",
    "r_help": "help(factor, package=base)",
    "body": "\n<b>Descripción</b></br>\nLa función factor se utiliza para una variable de factor/ordinal ordenado. Se supone que los niveles del factor están ordenados. \n<br/>\n<b>Uso</b>\n<br/>\n<code>\nfactor(x = character(),  ordered = TRUE)\n</code> <br/>\n<b>Argumentos</b><br/>\n<ul>\n<li>\nx: un vector de datos, que generalmente toma un pequeño número de valores distintos.\n</li>\n<li>\nlevels:\tvectores opcionales de los valores (como cadenas de caracteres) que x podría haber tomado. El valor predeterminado es el conjunto único de valores tomados por as.character(x), ordenados en orden creciente de x. Tenga en cuenta que este conjunto puede especificarse como menor que sort(unique(x)).\n</li>\n<li>\nlabels:\tvectores de caracteres opcionales de etiquetas para los niveles (en el mismo orden que los niveles después de eliminar los que están en exclude), o una cadena de caracteres de longitud 1.\n</li>\n<li>\nexclude: Un vector de valores a excluir al formar el conjunto de niveles. Esto debe ser del mismo tipo que x, y se coercionará si es necesario.\n</li>\n<li>\nordered: bandera lógica para determinar si los niveles deben considerarse ordenados (en el orden dado).\n</li>\n<li>\nnmax: un límite superior en el número de niveles; consulte 'Detalles'.\n</li>\n<li>\n...(en ordered(.)): cualquiera de los anteriores, aparte de ordered en sí.\n</li>\n<li>\nifany: (solo agregar un nivel NA si se usa, es decir, si any(is.na(x)).\n</li>\n</ul>\n<b>Detalles</b></br>\nEl tipo del vector x no está restringido; solo debe tener un método as.character y ser ordenable (por sort.list).<br/>\nLos factores ordenados difieren de los factores solo en su clase, pero los métodos y las funciones de ajuste de modelos tratan las dos clases de manera bastante diferente.<br/>\nLa codificación del vector ocurre de la siguiente manera. Primero, todos los valores en exclude se eliminan de levels. Si x[i] es igual a levels[j], entonces el i-ésimo elemento del resultado es j. Si no se encuentra coincidencia para x[i] en levels (lo que sucederá para los valores excluidos), entonces el i-ésimo elemento del resultado se establece en NA.<br/>\nNormalmente, los 'niveles' utilizados como un atributo del resultado son el conjunto reducido de niveles después de eliminar aquellos en exclude, pero esto puede alterarse suministrando etiquetas. Esto debería ser un conjunto de nuevas etiquetas para los niveles, o una cadena de caracteres, en cuyo caso los niveles son esa cadena de caracteres con un número de secuencia adjunto.<br/>\nfactor(x, exclude = NULL) aplicado a un factor es una no-operación a menos que haya niveles no utilizados: en ese caso, se devuelve un factor con el conjunto de niveles reducido. Si se usa exclude, también debe ser un factor con el mismo conjunto de niveles que x o un conjunto de códigos para los niveles a excluir.<br/>\nLos códigos de un factor pueden contener NA. Para un x numérico, establezca exclude = NULL para hacer que NA sea un nivel extra (se imprime como <NA>); por defecto, este es el último nivel.<br/>\nSi NA es un nivel, la forma de establecer un código como faltante (en oposición al código del nivel faltante) es usar is.na en el lado izquierdo de una asignación (como en is.na(f)[i] <- TRUE; la indexación dentro de is.na no funciona). En esas circunstancias, los valores faltantes se imprimen actualmente como <NA>, es decir, idénticos a las entradas del nivel NA.<br/>\nis.factor es genérico: puede escribir métodos para manejar clases específicas de objetos, consulte InternalMethods.<br/>\nDonde levels no se suministra, se llama a unique. Dado que los factores típicamente tienen un número bastante pequeño de niveles, para vectores grandes x es útil suministrar nmax como un límite superior en el número de valores únicos.<br/>\n<b>Valor</b><br/>\nfactor devuelve un objeto de clase \"factor\" que tiene un conjunto de códigos enteros de la longitud de x con un atributo \"niveles\" de modo carácter y único (!anyDuplicated(.)) entradas. Si el argumento ordered es verdadero (o se usa ordered()), el resultado tiene clase c(\"ordered\", \"factor\").<br/>\nAplicar factor a un factor ordenado o no ordenado devuelve un factor (del mismo tipo) con solo los niveles que ocurren: consulte también [.factor para una forma más transparente de lograr esto.\nis.factor devuelve TRUE o FALSE dependiendo de si su argumento es de tipo factor o no. Correspondientemente, is.ordered devuelve TRUE cuando su argumento es un factor ordenado y FALSE de lo contrario.<br/>\nas.factor coerciona su argumento a un factor. Es una forma abreviada de factor.<br/>\nas.ordered(x) devuelve x si esto está ordenado, y ordered(x) de lo contrario.<br/>\naddNA modifica un factor convirtiendo NA en un nivel extra (para que los valores NA se cuenten en tablas, por ejemplo).<br/>\n<b>Paquete</b></br>\nbase</br>\n<b>Ayuda</b></br>\nhelp(factor, package =base)\n"
  }
}