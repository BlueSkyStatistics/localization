{
  "title": "Gráfico de Distribución de Poisson",
  "navigation": "Gráfico de Distribución de Poisson",
  "lambda": "Media",
  "plotProb": "Graficar función de masa de probabilidad",
  "plotDistrib": "Graficar función de distribución",
  "help": {
    "title": "Gráfico de Distribución de Poisson",
    "r_help": "help(qpois, package=stats)",
    "body": "\n\n            <b>Descripción</b>\n            <br/>\n            Densidad, función de distribución, función cuantil y generación aleatoria para la distribución de Poisson con parámetro lambda.\n            <br/>\n            <b>Uso</b>\n            <br/>\n            <code>\n                dpois(x, lambda, log = FALSE)\n                <br/>\n                ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                rpois(n, lambda)\n                <br/>\n            </code>\n            <br/>\n            <b>Argumentos</b>\n            <br/>\n            <ul>\n                <li>x : vector de cuantiles (números enteros no negativos).</li>\n                \n                \n                <li>q : vector de cuantiles.</li>\n                \n                \n                <li>p : vector de probabilidades.</li>\n                \n                \n                <li>n : número de valores aleatorios a devolver.</li>\n                \n                \n                <li>lambda : vector de medias (no negativas).</li>\n                \n                \n                <li>log, log.p : lógico; si es TRUE, las probabilidades p se dan como log(p).</li>\n                \n                \n                <li>lower.tail : lógico; si es TRUE (por defecto), las probabilidades son P[X ≤ x], de lo contrario, P[X > x].</li>\n            </ul>\n            \n            \n            \n            <br/>\n            <b>Detalles</b>\n            <br/>\n            La distribución de Poisson tiene densidad\n            <br/>\n            <code>p(x) = λ^x exp(-λ)/x!</code>\n            <br/>\n            para x = 0, 1, 2, … . La media y la varianza son E(X) = Var(X) = λ.\n            <br/>\n            Tenga en cuenta que λ = 0 es realmente un caso límite (estableciendo 0^0 = 1) resultando en una masa puntual en 0, vea también el ejemplo.\n            <br/>\n            Si un elemento de x no es un entero, el resultado de dpois es cero, con una advertencia. p(x) se calcula utilizando el algoritmo de Loader, consulte la referencia en dbinom.\n            <br/>\n            El cuantil es continuo a la derecha: qpois(p, lambda) es el entero más pequeño x tal que P(X ≤ x) ≥ p.\n            <br/>\n            Establecer lower.tail = FALSE permite obtener resultados mucho más precisos cuando el valor por defecto, lower.tail = TRUE, devolvería 1, vea el ejemplo a continuación.\n            <br/>\n            <br/><b>Valor</b>\n            <br/>\n            dpois da la densidad (log), ppois da la función de distribución (log), qpois da la función cuantil, y rpois genera desviaciones aleatorias.\n            <br/>\n            Un lambda inválido resultará en un valor de retorno NaN, con una advertencia.\n            <br/>\n            La longitud del resultado está determinada por n para rpois, y es el máximo de las longitudes de los argumentos numéricos para las otras funciones.\n            <br/>\n            Los argumentos numéricos distintos de n se reciclan a la longitud del resultado. Solo se utilizan los primeros elementos de los argumentos lógicos.            \n      "
  }
}