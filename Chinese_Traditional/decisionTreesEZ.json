{
  "title": "決策樹",
  "navigation": "決策樹",
  "TxtTreeName": "輸入模型名稱",
  "TreeGenChkbox": "如果樹已存在則不重新生成",
  "dependent": "依賴變數",
  "independent": "獨立變數",
  "weights": "調查權重",
  "TxtMinSplit": "最小分割",
  "minBucket": "最小桶",
  "TxtCP": "複雜度參數",
  "maxDepth": "最大深度",
  "PruneTreeChkbox": "修剪樹",
  "rd0": "不修剪",
  "rd1": "使用最佳複雜度參數",
  "rd2": "指定複雜度參數",
  "TxtCPPrune": "輸入複雜度參數",
  "PlotCVChkbox": "繪製交叉驗證",
  "PlotRSQRChkbox": "繪製 R 平方",
  "help": {
    "title": "決策樹",
    "r_help": "help(rpart, package ='rpart')",
    "body": "\n                <b>注意</b></br>\n                依賴變數可以是因子、序數、字串、邏輯和數值</br>\n                獨立變數可以是因子、序數、字串、邏輯和數值</br></br>\n                <b>描述</b></br>\n                擬合一個遞歸分區和回歸樹模型\n                <br/>\n                <b>用法</b>\n                <br/>\n                <code> \n                rpart(formula, data, weights, subset, na.action = na.rpart, method,\n                      model = FALSE, x = FALSE, y = TRUE, parms, control, cost, ...)\n                </code> <br/>\n                <b>參數</b><br/>\n                <ul>\n                <li>\n                formula: 一個公式，包含響應但不包含交互項。如果這是一個數據框，則將其視為模型框架（見 model.frame）。\n                </li>\n                <li>\n                data: 一個可選的數據框，用於解釋公式中命名的變數。\n                </li>\n                <li>\n                weights: 可選的案例權重。\n                </li>\n                <li>\n                subset: 可選的表達式，表示僅使用數據的子集進行擬合。\n                </li>\n                <li>\n                na.action: 默認操作刪除所有缺失 y 的觀察，但保留一個或多個預測變數缺失的觀察。\n                </li>\n                <li>\n                method: \"anova\"、\"poisson\"、\"class\" 或 \"exp\" 之一。如果缺少方法，則例程會嘗試進行智能猜測。如果 y 是生存對象，則假設 method = \"exp\"；如果 y 有 2 列，則假設 method = \"poisson\"；如果 y 是因子，則假設 method = \"class\"；否則假設 method = \"anova\"。最好直接指定方法，特別是因為將來可能會向函數添加更多標準。\n                或者，方法可以是一個名為 init、split 和 eval 的函數列表。示例在源文件 'tests/usersplits.R' 中提供，並在小冊子 '用戶編寫的拆分函數' 中提供。\n                </li>\n                <li>\n                model: 如果是邏輯：在結果中保留模型框架的副本？如果模型的輸入值是模型框架（可能來自對 rpart 函數的早期調用），則使用該框架而不是構建新數據。\n                </li>\n                <li>\n                x: 在結果中保留 x 矩陣的副本。\n                </li>\n                <li>\n                y: 在結果中保留依賴變數的副本。如果缺失且提供了模型，則默認為 FALSE。\n                </li>\n                <li>\n                parms: 用於拆分函數的可選參數。<br/>\n                Anova 拆分沒有參數。<br/>\n                Poisson 拆分有一個參數，即先前分佈的變異係數。默認值為 1。<br/>\n                指數拆分具有與 Poisson 相同的參數。<br/>\n                對於分類拆分，列表可以包含任何：先前概率的向量（組件 prior）、損失矩陣（組件 loss）或拆分指數（組件 split）。先前必須為正且總和為 1。損失矩陣必須在對角線上為零，並且在非對角線元素上為正。拆分指數可以是 gini 或信息。默認先前與數據計數成比例，損失默認為 1，拆分默認為 gini。<br/>\n                </li>\n                <li>\n                control: 控制 rpart 算法詳細信息的選項列表。請參見 rpart.control。\n                </li>\n                <li>\n                cost: 一個非負成本的向量，每個變數一個。默認為所有變數的 1。這些是在考慮拆分時應用的縮放，因此在決定選擇哪個拆分時，對變數的拆分改進除以其成本。\n                </li>\n                <li>\n                ...: 也可以在對 rpart 的調用中指定 rpart.control 的參數。它們會檢查有效參數列表。\n                </li>\n                </ul>\n                <b>詳細信息</b></br>\n                這與 S 中的 tree 函數主要在於其對替代變數的處理。在大多數細節上，它與 Breiman 等人（1984）非常接近。R 包 tree 提供了 tree 的重新實現。\n                <b>值</b></br>\n                一個 rpart 類的對象。請參見 rpart.object。</br>\n                <b>參考文獻</b></br>\n                Breiman L., Friedman J. H., Olshen R. A., 和 Stone, C. J. (1984) 分類和回歸樹。Wadsworth。</br>\n                <b>另請參見</b></br>\n                rpart.control, rpart.object, summary.rpart, print.rpart</br>\n                <b>示例</b></br>\n                fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)</br>\n                fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,\n                              parms = list(prior = c(.65,.35), split = \"information\"))</br>\n                fit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,\n                              control = rpart.control(cp = 0.05))</br>\n                par(mfrow = c(1,2), xpd = NA) # 否則在某些設備上文本會被截斷</br>\n                plot(fit)</br>\n                text(fit, use.n = TRUE)</br>\n                plot(fit2)</br>\n                text(fit2, use.n = TRUE)</br>\n                <b>包</b></br>\n                rpart;rpart.plot;partykit</br>\n                <b>幫助</b></br>\n                help(rpart, package ='rpart')</br></br>\n                <b>描述</b></br>\n                控制 Rpart 擬合的各種參數。\n                <br/>\n                <b>用法</b>\n                <br/>\n                <code> \n                rpart.control(minsplit = 20, minbucket = round(minsplit/3), cp = 0.01, \n                              maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10,\n                              surrogatestyle = 0, maxdepth = 30, ...)\n                </code> <br/>\n                <b>參數</b><br/>\n                <ul>\n                <li>\n                minsplit: 在一個節點中必須存在的最小觀察數，以便嘗試進行拆分。\n                </li>\n                <li>\n                minbucket: 在任何終端 <leaf> 節點中的最小觀察數。如果僅指定 minbucket 或 minsplit，則代碼會根據需要將 minsplit 設置為 minbucket*3 或 minbucket 設置為 minsplit/3。\n                </li>\n                <li>\n                cp: 複雜度參數。任何不減少整體擬合缺失的拆分都不會被嘗試。例如，使用 anova 拆分，這意味著整體 R 平方必須在每一步增加 cp。此參數的主要作用是通過修剪掉顯然不值得的拆分來節省計算時間。本質上，用戶告訴程序，任何不改善擬合的拆分都可能會被交叉驗證修剪掉，因此程序無需追求它。\n                </li>\n                <li>\n                maxcompete: 輸出中保留的競爭拆分的數量。知道不僅選擇了哪個拆分，還知道哪個變數排在第二、第三等是有用的。\n                </li>\n                <li>\n                maxsurrogate: 輸出中保留的替代拆分的數量。如果設置為零，則計算時間將減少，因為大約一半的計算時間（除了設置）用於搜索替代拆分。\n                </li>\n                <li>\n                usesurrogate: 在拆分過程中如何使用替代品。0 意味著僅顯示；缺少主要拆分規則的觀察不會進一步向下樹。1 意味著使用替代品，按順序拆分缺少主要變數的主題；如果所有替代品都缺失，則不進行拆分。對於值 2，如果所有替代品都缺失，則將觀察發送到大多數方向。值 0 對應於 tree 的操作，值 2 對應於 Breiman 等人（1984）的建議。\n                </li>\n                <li>\n                xval: 交叉驗證的數量。\n                </li>\n                <li>\n                surrogatestyle: 控制最佳替代品的選擇。如果設置為 0（默認），則程序使用潛在替代變數的正確分類總數；如果設置為 1，則使用在替代品的非缺失值上計算的正確百分比。第一個選項對缺失值較多的協變數處罰更嚴格。\n                </li>\n                <li>\n                maxdepth: 設置最終樹的任何節點的最大深度，根節點計算為深度 0。對於 32 位機器，值大於 30 的 rpart 將給出無意義的結果。\n                </li>\n                <li>\n                ...: 處理其他參數。\n                </li>\n                </ul>\n                <b>值</b></br>\n                包含選項的列表。\n                      "
  }
}