{
  "title": "디스플레이 규칙",
  "navigation": "디스플레이 규칙",
  "rulename": "기존 규칙 객체 입력",
  "dosortingchk": "규칙 정렬",
  "sortopt": "정렬 옵션",
  "sortby": "정렬 기준",
  "confchk": "신뢰도",
  "liftchk": "리프트",
  "suppchk": "지지",
  "sortord": "정렬 순서",
  "increasing": "오름차순",
  "decreasing": "내림차순",
  "noofrules": "표시할 규칙 수",
  "rulecount": "",
  "fromto": "규칙 표시",
  "from": "부터",
  "to": "까지",
  "help": {
    "title": "디스플레이 규칙",
    "r_help": "help(inspect, package='arules')",
    "body": "\n            <b>\n\t\t\t패키지 : arulesViz\n\t\t\t</b>\n\t\t\t<br/><br/>\n            <b>\n            1.  inspect\n            </b>\n            <br/><br/>\n\t\t\t<b>\n\t\t\t설명\n\t\t\t</b>\n\t\t\t<br/><br/>\n            연관성과 거래를 표시하고 온라인 검사를 위해 형식화된 추가 정보를 제공하는 일반 함수 inspect 및 S4 메서드를 제공합니다.\n            <br/><br/>\n\t\t\t<b>\n\t\t\t사용법\n\t\t\t</b>\n\t\t\t<br/><br/>\n\t\t\t<code>\n            inspect(x, ...)\n            </code>\n            <br/><br/>\n            <b>인수</b><br/>\n            <ul>\n            <li>\n            x: 연관성 또는 거래의 집합 또는 itemMatrix.\n            </li>\n            <li>\n            ...: 출력 사용자 지정을 위해 사용할 수 있는 추가 인수: setStart, setEnd, itemSep 및 ruleSep. 출력 라인이 매우 길어질 경우 항목은 한 줄에 하나만 인쇄됩니다. 이는 linebreak를 사용하여 직접 제어할 수도 있습니다.\n            </li>\n            </ul>\n            <br/><br/>\n\n            <b>\n            2. sort\n            </b>\n            <br/><br/>\n\n\t\t\t<b>\n\t\t\t설명\n\t\t\t</b>\n\t\t\t<br/><br/>\n            연관성의 슬롯 품질에 저장된 측정값의 값에 따라 클래스 연관성(예: 아이템 세트 또는 규칙)의 요소를 정렬하는 메서드 sort를 제공합니다.\n            <br/><br/>\n\t\t\t<b>\n\t\t\t사용법\n\t\t\t</b>\n\t\t\t<br/><br/>\n\t\t\t<code>\n            ## S4 메서드 서명 'associations'에 대한\n            arules::sort(x, decreasing = TRUE, na.last = NA, \n            by = \"support\", order = FALSE, ...)\n            </code>\n            <br/><br/>\n\t\t\t<code>\n            ## S4 메서드 서명 'associations'에 대한\n            head(x, n = 6L, by = NULL, decreasing = TRUE, ...)\n            </code>\n            <br/><br/>\n\t\t\t<code>\n            ## S4 메서드 서명 'associations'에 대한\n            tail(x, n = 6L, by = NULL, decreasing = TRUE, ...)\n            </code>\n            <br/><br/>                        \n            <b>인수</b><br/>\n            <ul>\n            <li>\n            x: 정렬할 객체.\n            </li>\n            <li>\n            decreasing: 논리값. 정렬이 오름차순인지 내림차순인지? (기본값은 내림차순)\n            </li>\n            <li>\n            na.last: 연관성에 대해 na.last는 지원되지 않습니다. NAs는 항상 마지막에 배치됩니다.\n            </li>\n            <li>\n            by: x를 정렬하는 데 사용할 품질 측정을 지정하는 문자열입니다. 문자열 벡터가 지정되면 추가 문자열이 동점의 경우 x를 정렬하는 데 사용됩니다.\n            </li>\n            <li>\n            order: 정렬된 연관성 대신 순서 벡터를 반환해야 합니까?\n            </li>\n            <li>\n            n: 반환되는 연관성의 수를 나타내는 단일 정수입니다.\n            </li>\n            <li>\n            ... : 추가 인수는 무시됩니다.\n            </li>                                    \n            </ul>\n            <br/><br/>     \n            <b> \n            세부정보\n            </b> \n            <br/>\n            정렬은 대규모 연관성 집합에 대해 상대적으로 느리며, 대규모 데이터 구조를 복사하고 재배열해야 합니다. 정렬은 연관성 집합의 두 번째 복사본을 생성하므로 대규모 집합에 대해 느리고 메모리를 많이 소모할 수 있습니다. order = TRUE인 경우 정렬된 연관성 대신 순서가 있는 정수 벡터가 반환됩니다.\n            필요한 경우 상위 n개의 연관성만 필요하면 by를 사용하여 head가 sort를 호출하고 그 후 head를 호출하는 것보다 더 빠르게 수행합니다. tail도 같은 방식으로 작동합니다.\n            <br/><br/>  \n            <b> \n            값\n            </b> \n            <br/>\n            x와 동일한 클래스의 객체입니다.                  \n    "
  }
}