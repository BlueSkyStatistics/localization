{
  "correlationType": "相关类型",
  "Polychoric": "多序列相关",
  "Polyserial": "多序列相关",
  "title": "多序列/多序列相关",
  "bins": "对于多序列相关 - 用于双变量正态性检验的x变量的分箱数量",
  "navigation": "多序列, 多序列",
  "Target": "选择一个或多个x变量",
  "textbox1": "置信区间",
  "textbox2": "零假设 (mu)",
  "Target2": "选择一个单一的有序因子变量y",
  "label1": "估计类型",
  "test1": "两步近似",
  "test2": "最大似然估计",
  "label2": "标准误差",
  "Missvals": "显示标准误差",
  "conflevel": "最大绝对相关性（以确保数值稳定性）。",
  "Seed": "可选的起始值",
  "header": "相关性是在每个x变量和y变量之间估计的",
  "showEffectSizes": "返回估计的阈值",
  "advanced_lbl" : "高级",
  "help": {
    "title": "多序列/多序列相关",
    "r_help": "help(polychor, package ='polycor')",
    "body": "\n<b>描述</b></br>\n计算多序列或多序列相关性。相关性是在每个x变量和y变量之间估计的\n<br/>\n<br/>\n<b>描述-多序列</b></br>\n计算两个有序变量之间的多序列相关性（及其标准误差），假设有序变量分解为双变量正态的连续潜在变量。可以使用最大似然估计或（可能更快的）“两步”近似。对于ML估计，阈值的估计和估计的协方差矩阵也可用。\n<br/>\n<b>用法</b>\n<br/>\n<code> \npolychor(x, y, ML = FALSE, control = list(), \n  std.err = FALSE, maxcor=.9999, start, thresholds=FALSE)\n</code> <br/>\n<b>参数</b><br/>\n<ul>\n<li>\nx: 有序分类变量；变量可以是数字、逻辑、因子、有序因子或字符变量，但如果是因子，其水平应按正确顺序排列，字符变量的值按字母顺序排列。\n</li>\n<li>\ny: 一个有序因子变量\n</li>\n<li>\nML: 如果为TRUE，计算最大似然估计；如果为FALSE，默认情况下，计算更快的“两步”近似。\n</li>\n<li>\nstd.err: 如果为TRUE，返回相关性的估计方差（对于两步估计）或相关性和阈值的估计协方差矩阵（对于ML估计）；默认值为FALSE。 \n</li>\n<li>\nmaxcor: 最大绝对相关性（以确保数值稳定性）。\n</li>\n<li>\nstart: 可选的起始值：如果是单个数字，则为相关性的起始值。\n</li>\n<li>\nthresholds: 如果为TRUE（默认值为FALSE），即使未计算标准误差，也返回估计的阈值和估计的相关性。\n</li>\n</ul>\n<b>值</b></br>\n值：如果std.err或thresholds为TRUE，则返回一个类“polycor”的对象，包含以下组件：</br>\ntype: 设置为“多序列”。</br>\nrho: 多序列相关性。</br>\nrow.cuts: 行变量（x）的估计阈值，适用于ML估计。</br>\ncol.cuts: 列变量（y）的估计阈值，适用于ML估计。</br>\nvar: 相关性的估计方差，或者对于ML估计，相关性和阈值的估计协方差矩阵。</br>\nn: 相关性基于的观察数量。</br>\nchisq: 双变量正态性的卡方检验。</br>\ndf: 双变量正态性检验的自由度。</br>\nML: 对于ML估计为TRUE，对于两步估计为FALSE\n<b>详细信息</b></br>\nML估计是通过最大化双变量正态似然函数相对于两个变量的阈值（τ^x[i], i = 1,…, r - 1; τ^y[j], j = 1,…, c - 1）和总体相关性（ρ）来计算的。这里，r和c分别是x和y的水平数量。似然通过使用optim函数进行数值最大化，估计参数的协方差矩阵基于optim计算的数值Hessian。</br>\n两步估计是通过首先从每个变量的边际分布单独估计阈值（τ^x[i], i = 1,…, r - 1和τ^y[j], i = j,…, c - 1）。然后，使用optim最大化ρ的一维似然，如果请求标准误差，则使用optim，否则使用optimize。计算的标准误差将阈值视为固定。</br>\n<br/>\n<b>示例</b></br>\n<code> \nif(require(mvtnorm)){\n    set.seed(12345)\n    data <- rmvnorm(1000, c(0, 0), matrix(c(1, .5, .5, 1), 2, 2))\n    x <- data[,1]\n    y <- data[,2]\n    cor(x, y)  # 样本相关性\n    }\n\nif(require(mvtnorm)){\n    x <- cut(x, c(-Inf, .75, Inf))\n    y <- cut(y, c(-Inf, -1, .5, 1.5, Inf))\n    polychor(x, y)  # 两步估计\n    }\n\nif(require(mvtnorm)){\n    polychor(x, y, ML=TRUE, std.err=TRUE)  # ML估计\n    }\n</code> <br/>\n<b>包</b></br>\npolycor</br>\n<b>帮助</b></br>\n有关详细帮助，请单击此对话框覆盖右上角的R图标，或通过创建R代码块运行以下命令help(polycor, package ='polychor')，方法是单击输出窗口中的+           \n<br/>\n<br/>\n<b>描述-多序列</b></br>\n计算定量变量和有序变量之间的多序列相关性（及其标准误差），基于定量变量和潜在的连续变量的联合分布，该潜在变量是有序变量的基础，假设是双变量正态的。可以使用最大似然估计或更快的“两步”近似。对于ML估计，阈值的估计和估计的协方差矩阵也可用。\n<br/>\n<b>用法</b>\n<br/>\n<code> \npolyserial(x, y, ML = FALSE, control = list(), \n  std.err = FALSE, maxcor=.9999, bins=4, start, thresholds=FALSE)\n</code> <br/>\n<b>参数</b><br/>\n<ul>\n<li>\nx: 一个数字变量\n</li>\n<li>\ny: 一个有序分类变量；可以是数字、逻辑、因子、有序因子或字符变量，但如果是因子，其水平应按正确顺序排列，字符变量的值按字母顺序排列。\n</li>\n<li>\nML: 如果为TRUE，计算最大似然估计；如果为FALSE，默认情况下，计算更快的“两步”近似。\n</li>\n<li>\nstd.err: 如果为TRUE，返回相关性的估计方差（对于两步估计）或相关性和阈值的估计协方差矩阵（对于ML估计）；默认值为FALSE。 \n</li>\n<li>\nbins: 用于对x进行双变量正态性检验的分箱数量；默认值为4。\n</li>\n<li>\nmaxcor: 最大绝对相关性（以确保数值稳定性）。\n</li>\n<li>\nstart: 可选的起始值：如果是单个数字，则为相关性的起始值。\n</li>\n<li>\nthresholds: 如果为TRUE（默认值为FALSE），返回估计的阈值和估计的相关性，即使未计算标准误差。\n</li>\n</ul>\n<b>值</b></br>\n值：如果std.err或thresholds为TRUE，则返回一个类“polycor”的对象，包含以下组件：</br>\ntype: 设置为“多序列”。</br>\nrho: 多序列相关性。</br>\ncuts: 有序变量（y）的估计阈值，适用于ML估计。</br>\nvar: 相关性的估计方差，或者对于ML估计，相关性和阈值的估计协方差矩阵。</br>\nn: 相关性基于的观察数量。</br>\nchisq: 双变量正态性的卡方检验。</br>\ndf: 双变量正态性检验的自由度。</br>\nML: 对于ML估计为TRUE，对于两步估计为FALSE\n<b>示例</b></br>\n<code> \nif(require(mvtnorm)){\n    set.seed(12345)\n    data <- rmvnorm(1000, c(0, 0), matrix(c(1, .5, .5, 1), 2, 2))\n    x <- data[,1]\n    y <- data[,2]\n    cor(x, y)  # 样本相关性\n    }\n\nif(require(mvtnorm)){\n    y <- cut(y, c(-Inf, -1, .5, 1.5, Inf))\n    polyserial(x, y)  # 两步估计\n    }\n\nif(require(mvtnorm)){\n    polyserial(x, y, ML=TRUE, std.err=TRUE) # ML估计\n    }\n\n</code> <br/>\n<b>包</b></br>\npolycor</br>\n<b>帮助</b></br>\n有关详细帮助，请运行以下命令help(polyserial, package ='polychor')，通过创建R代码块单击输出窗口中的+           \n\n\t\t\t"
  }
}