{
  "title": "Gamma-Verteilung Diagramm",
  "navigation": "Gamma-Verteilung Diagramm",
  "shape": "Form",
  "scale": "Skala (inverse Rate)",
  "pdenfun": "Dichtefunktion plotten",
  "pdstfun": "Verteilungsfunktion plotten",
  "lblregions": "Optional Regionen unter der Dichtefunktion angeben durch",
  "xvals": "x-Werte",
  "quantiles": "Quantile",
  "lblRegFill": "Zu füllende Regionen (eine oder zwei angeben oder leer lassen)",
  "lblreg1": "Region 1 :",
  "lblreg2": "Region 2 :",
  "lblregfrm": "Von",
  "lblregto": "Bis",
  "lblregcol": "Farbe",
  "lblLegPos": "Position der Legende",
  "toprt": "Oben rechts",
  "toplt": "Oben links",
  "topmid": "Oben Mitte",
  "help": {
    "title": "Gamma-Verteilung Diagramm",
    "r_help": "hilfe(qgamma, paket=stats)",
    "body": "\n            ​​\n            <b>Beschreibung</b>\n            <br/>\n            Dichte, Verteilungsfunktion, Quantilfunktion und Zufallszahlen für die Gamma-Verteilung mit den Parametern Form und Skala.\n            <br/>\n            <b>Verwendung</b>\n            <br/>\n            <code>\n                dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)\n                <br/>\n                pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)\n                <br/>\n                rgamma(n, shape, rate = 1, scale = 1/rate)\n                <br/>\n            </code>\n            <br/>\n            <b>Argumente</b>\n            <br/>\n            <ul>\n                <li></li>\n                <li>x, q : Vektor von Quantilen.</li>\n                \n                \n                <li>p : Vektor von Wahrscheinlichkeiten.</li>\n                \n                \n                <li>n : Anzahl der Beobachtungen. Wenn die Länge(n) > 1, wird die Länge als die benötigte Anzahl betrachtet.</li>\n                \n                \n                <li>rate : eine alternative Möglichkeit, die Skala anzugeben.</li>\n                \n                \n                <li>shape, scale : Form- und Skalenparameter. Müssen positiv sein, Skala strikt.</li>\n                \n                \n                <li>log, log.p : logisch; wenn TRUE, werden Wahrscheinlichkeiten/Dichten p als log(p) zurückgegeben.</li>\n                \n                \n                <li>lower.tail : logisch; wenn TRUE (Standard), sind die Wahrscheinlichkeiten P[X ≤ x], andernfalls P[X > x].</li>\n            </ul>\n            \n            \n            \n            <br/>\n            Details\n            <br/>\n            Wenn die Skala weggelassen wird, wird der Standardwert von 1 angenommen.\n            <br/>\n            Die Gamma-Verteilung mit den Parametern shape = a und scale = s hat die Dichte\n            <br/>\n            <code>f(x)= 1/(s^a Gamma(a)) x^(a-1) e^-(x/s)</code>\n            <br/>\n            für x ≥ 0, a > 0 und s > 0. (Hier ist Gamma(a) die Funktion, die von R's gamma() implementiert wird und in seiner Hilfe definiert ist. Beachten Sie, dass a = 0 der trivialen Verteilung mit aller Masse am Punkt 0 entspricht.)\n            <br/>\n            Der Mittelwert und die Varianz sind <code>E(X) = a*s und Var(X) = a*s^2.</code>\n            <br/>\n            Die kumulative Hazard <code>H(t) = - log(1 - F(t))</code> ist\n            <br/>\n            -pgamma(t, ..., lower = FALSE, log = TRUE)\n            <br/>\n            Beachten Sie, dass für kleine Werte von shape (und moderater Skala) ein großer Teil der Masse der Gamma-Verteilung auf Werte von x so nahe Null liegt, dass sie in der Computerarithmetik als Null dargestellt werden. Daher kann rgamma Werte zurückgeben, die als Null dargestellt werden. (Dies wird auch für sehr große Werte von scale geschehen, da die tatsächliche Generierung für scale = 1 erfolgt.)\n            <br/>\n            <br/><b>Wert</b>\n            <br/>\n            dgamma gibt die Dichte zurück, pgamma gibt die Verteilungsfunktion zurück, qgamma gibt die Quantilfunktion zurück, und rgamma generiert Zufallszahlen.\n            <br/>\n            Ungültige Argumente führen zu einem Rückgabewert NaN, mit einer Warnung.\n            <br/>\n            Die Länge des Ergebnisses wird durch n für rgamma bestimmt und ist das Maximum der Längen der numerischen Argumente für die anderen Funktionen.\n            <br/>\n            Die numerischen Argumente außer n werden auf die Länge des Ergebnisses wiederverwendet. Nur die ersten Elemente der logischen Argumente werden verwendet.\n            <br/>\n            <br/><b>Hinweis</b>\n            <br/>\n            Die S (Becker et al, 1988) Parametrisierung war über shape und rate: S hatte keinen Skalenparameter. Es ist ein Fehler, sowohl eine Skala als auch eine Rate anzugeben.\n            <br/>\n            pgamma ist eng verwandt mit der unvollständigen Gammafunktion. Wie von Abramowitz und Stegun 6.5.1 definiert (und von 'Numerical Recipes') ist dies\n            <br/>\n            <code>P(a,x) = 1/Gamma(a) integral_0^x t^(a-1) exp(-t) dt</code>\n            <br/>\n            P(a, x) ist pgamma(x, a). Andere Autoren (zum Beispiel Karl Pearson in seinen Tabellen von 1922) lassen den Normalisierungsfaktor weg und definieren die unvollständige Gammafunktion γ(a,x) als gamma(a,x) = integral_0^x t^(a-1) exp(-t) dt, d.h. pgamma(x, a) * gamma(a). Wieder andere verwenden die 'obere' unvollständige Gammafunktion,\n            <br/>\n            <code>Gamma(a,x) = integral_x^Inf t^(a-1) exp(-t) dt,</code>\n            <br/>\n            die durch pgamma(x, a, lower = FALSE) * gamma(a) berechnet werden kann.\n            <br/>\n            Beachten Sie jedoch, dass pgamma(x, a, ..) derzeit a > 0 erfordert, während die unvollständige Gammafunktion auch für negatives a definiert ist. In diesem Fall können Sie gamma_inc(a,x) (für Γ(a,x)) aus dem Paket gsl verwenden.\n            <br/>\n            Siehe auch https://en.wikipedia.org/wiki/Incomplete_gamma_function, oder http://dlmf.nist.gov/8.2#i.            \n      "
  }
}